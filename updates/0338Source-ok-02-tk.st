'Methods with original comments and temp names.Only those that do not affect actual byteCode will be installed.'.Changes init.MergingSources _ true. "must be turned off at end"Float understands: 'asDegrees		"self assumed to be in radians"	[self / radiansPerDegree]' classified: falseFloat understands: 'asDirection [self cos  self sin]' classified: falseFloat understands: 'asFloat' classified: falseFloat understands: 'asLarge | me digits nat i "convert to LargeInteger"	[self<0[(0.0-self) asLarge negated]	 digits _ Stream default.	 [self=0.0[digits next_ 0]	  me _ self ipart.	  while me1 do		[digits next _ (me\256.0) asInteger.	 	 me _ me/256.0]].	 digits _ digits contents.	 nat _ Natural new: digits length.	 for i to: digits length do [nati _ digitsi].	 LargeInteger new bytes: nat neg: false]' classified: falseFloat understands: 'asRadians		"self assumed to be in degrees"	[self * radiansPerDegree]' classified: falseFloat understands: 'copy [self]' classified: falseFloat understands: 'ipart		"Returns a Float with zero fractional part"	[self-self fpart]' classified: falseFloat understands: 'ipow: x		"fixed powers in log n steps"	[x=0 [1.0]	x=1 [self]	x>1 [((self*self) ipow: x/2)*(self ipow: x\2)]	1.0/(self ipow: 0-x)]' classified: falseFloat understands: 'log: base [self ln / base asFloat ln]' classified: falseFloat understands: 'near: n within: eps [	"for testing near equality, e.g. error convergence"	(self - n) abs  eps]' classified: falseFloat understands: 'neg "Obsolete - use negated, which is uniform for all Numbers"	[self negated]' classified: falseFloat understands: 'negated [0.0-self]' classified: falseFloat understands: 'recopy [self]' classified: falseFloat understands: 'round	[(self + [self < 0 [0.5] 0.5]) asInteger]' classified: falseFloat understands: '\ arg	"By analogy with integers"	[self<0.0[(self/arg) ipart+1.0*arg+self]	self-((self/arg) ipart*arg)]' classified: falseFloat understands: '| arg	"By analogy with integers"	[(self/arg) ipart*arg]' classified: falseObject understands: ' code	[Generator new evaluate: code asStream in: false to: self notifying: self]' classified: falseObject understands: 'argsOff: stack	[self [stack pop: 1]]' classified: falseObject understands: 'asFullString | strm	[strm _ (String new: 20) asStream.	self fullprinton: strm. strm contents]' classified: falseObject understands: 'asRemoteCode: generator	[ParsedRemote new expr: self]' classified: falseObject understands: 'asString | strm	[strm _ (String new: 16) asStream.	self printon: strm. strm contents]' classified: falseObject understands: 'emitForEffect: code on: stack' classified: falseObject understands: 'emitForTruth: trueSkip falsity: falseSkip into: code on: stack	[self emitForValue: code on: stack.	(trueSkip jmpSize + falseSkip) emitBfp: code on: stack.	trueSkip emitJmp: code on: stack]' classified: falseObject understands: 'emitForValue: code on: stack' classified: falseObject understands: 'emitsLoad	[false]' classified: falseObject understands: 'emittedReceiver	[false]' classified: falseObject understands: 'emittedVariable	[false]' classified: falseObject understands: 'filout | file	[user displayoffwhile 		[file _ dp0 file: self title asFileName.		self fullprinton: file.		file close]]' classified: falseObject understands: 'findMacros: macros compilerTemps: compilerTemps' classified: falseObject understands: 'firstPush	[1]' classified: falseObject understands: 'fullprint | strm	[strm _ Stream default. self fullprinton: strm.	user show: strm contents]' classified: falseObject understands: 'fullprinton: strm	[selfnil [strm append: ''nil'']	selffalse [strm append: ''false'']	selftrue [strm append: ''true'']	self class print: self on: strm]' classified: falseObject understands: 'isField	[false]' classified: falseObject understands: 'notify: errorString at: position in: stream	[self notify: errorString at: position in: stream for: self class]' classified: falseObject understands: 'perform: selector 	"Send the unary message, selector, to self"	[selector mustTake: 0. self performDangerously: selector]' classified: falseObject understands: 'perform: selector with: arg1 	"Send the 1-argument message, selector, to self"	[selector mustTake: 1. self performDangerously: selector with: arg1]' classified: falseObject understands: 'perform: selector with: arg1 with: arg2 	"Send the 2-argument message, selector, to self"	[selector mustTake: 2. self performDangerously: selector with: arg1 with: arg2]' classified: falseObject understands: 'perform: selector with: arg1 with: arg2 with: arg3 	"Send the 3-argument message, selector, to self"	[selector mustTake: 3. self performDangerously: selector with: arg1 with: arg2 with: arg3]' classified: falseObject understands: 'perform: selector withArgs: vec	[selector mustTake: vec length.	self performDangerously: selector withArgs: vec]' classified: falseObject understands: 'performDangerously: selector withArgs: vec	[vec length=0 [self performDangerously: selector];		=1 [self performDangerously: selector with: vec1];		=2 [self performDangerously: selector with: vec1 with: vec2];		=3 [self performDangerously: selector with: vec1 with: vec2 with: vec3]	user notify: ''More than 3 args for perform:'']' classified: falseObject understands: 'print	[user show: self asString]' classified: falseObject understands: 'printon: strm | t [	strm append: [selfnil [''nil'']; false [''false'']; true [''true'']		t _ self class title.		strm append: [''AEIO'' has: t1 [''an ''] ''a ''].		t]]' classified: falseObject understands: 'printon: strm indent: level precedence: p forValue: v decompiler: decompiler' classified: falseObject understands: 'remote: generator' classified: falseObject understands: 'returns	[false]' classified: falseObject understands: 'sizeForEffect: nextPush 	[0]' classified: falseObject understands: 'sizeForTruth: trueSkip falsity: falseSkip		| jump	[jump _ trueSkip jmpSize.	self sizeForValue + (jump+falseSkip) bfpSize + jump]' classified: falseObject understands: 'sizeForValue	[0]' classified: falseObject understands: 'swap variable | x  "assign me to variable and return its old value"	[x _ variable value. variable value _ self. x]' classified: falseObject understands: 'title	[self class title + ''.'' + self asOop base8]' classified: falseUserView understands: 'anykeys [self keyset>0]' classified: falseUserView understands: 'changedMessages [Changes contents sort]' classified: falseUserView understands: 'clear		"clear disp of debris and characters"	[disp clear]' classified: falseUserView understands: 'clearshow: str	[disp clear; append: str; show]' classified: falseUserView understands: 'color: color scale: scale	[self install]' classified: falseUserView understands: 'cr [disp cr]' classified: falseUserView understands: 'croak	[self notify: ''A primitive has failed.'']' classified: falseUserView understands: 'currentCursor [currentCursor]' classified: falseUserView understands: 'ev	[disp ev]' classified: falseUserView understands: 'frame		"return rectangle of dialogue window"	[disp text frame]' classified: falseUserView understands: 'growSmalltalk: numberofdiskpages	"for preemptive growth of Small.boot on disk"	[dp0 growSmalltalkBy: numberofdiskpages]' classified: falseUserView understands: 'leaveTop		"leave the top window if there is one"	[sched length=0[]	(sched1) leave]' classified: falseUserView understands: 'newdisp "for when some class associated with running Dispframe  changed"	[	self unschedule: disp.	disp _ Dispframe new rect: (80 rect: 15096).	self schedule: disp ; clearshow: ''New Dialogue window created.'']' classified: falseUserView understands: 'newdisploc: origin and: corner "for moving disp"	["user newdisploc: 80 and: 15096"	(disp text frame inset: 22) clear.	disp text frame _ origin rect: corner.	disp show]' classified: falseUserView understands: 'next _ x ["simulate a Vector Stream"	disp cr; print: x; show]' classified: falseUserView understands: 'nobug	[self anybug  false]' classified: falseUserView understands: 'noChanges [Changes init]' classified: falseUserView understands: 'print: x [disp print: x; show]' classified: falseUserView understands: 'projectWindow [	[projectWindownil		[projectWindow _ ProjectWindow new.		projectWindow userview: self changes: Changes parent: projectWindow]].	projectWindow]' classified: falseUserView understands: 'promote: window	[sched promote: window]' classified: falseUserView understands: 'quit 	[self quitFrom: self "yup"]' classified: falseUserView understands: 'quitThen: str | rem rest ["quit, then have OS execute str"	rem _ (dp0 file: ''rem.cm'') readonly.	rest _ rem next: rem length.	rem readwrite; reset; append: str; cr; append: rest; close.	self quit]' classified: falseUserView understands: 'quitThen: s continue: r [	[s [		"something for O.S. to do"		(dp0 oldFile: ''rem.cm.'') settoend;			append: s; append: ''; '';			append: [r [''Resume.~ small.boot''] ''Quit.~; Resume.~ small.boot''];			cr; flush]].	self quit]' classified: falseUserView understands: 'read [disp read]' classified: falseUserView understands: 'releaseExternalViews | t [	"close some things that we know about, everything else gets released"	Sources close. dp0 close. dp1 close.	"release (obsolete) some external views, usually File related"	for t from: externalViews length to: 1 by: 1 do [		(externalViewst) release. externalViewst _ nil].	externalViews reset]' classified: falseUserView understands: 'request: s[disp request: s]' classified: falseUserView understands: 'restart code | u	[u _ code cleancopy. u sender _ nil.	thisContext sender releaseFully.	thisContext sender _ nil.	code _ nil. 	"release caller chain"	MessageDict new freeMethods.		"release held code"	disp frame flash.	while true do [u eval]]' classified: falseUserView understands: 'run	[self run: false]' classified: falseUserView understands: 'sched [sched]' classified: falseUserView understands: 'scheduleOnBottom: window	[schednil[sched _ window asVector]	sched _ sched concat: window asVector]' classified: falseUserView understands: 'screenrect [screenrect]' classified: falseUserView understands: 'screenrect: screenrect vtab: vtab htab: htab scale: scale color: color projectWindow: projectWindow disp: disp sched: sched' classified: falseUserView understands: 'show [disp outline; show]' classified: falseUserView understands: 'show: str	[disp append: str; show]' classified: falseUserView understands: 'space	[disp space]' classified: falseUserView understands: 'tab [disp tab]' classified: falseUserView understands: 'tablet [(mem0177100)  0]' classified: falseUserView understands: 'tabletabsolute [mem0126 _ 1]' classified: falseUserView understands: 'tabletbug [(mem0177100) < 0]' classified: falseUserView understands: 'tabletrelative [mem0126 _ 1]' classified: falseUserView understands: 'time [self now2]' classified: falseUserView understands: 'today [self now1]' classified: falseUserView understands: 'versionName | s [	s _ self version asStream.	"skip Smalltalk"	s skipTo: 040.	"return version identification, e.g. 5.5f"	s upto: 040]' classified: falseUserView understands: 'waitclickbug	[self waitnobug. self waitbug]' classified: falseUserView understands: 'waitnokey [until self keyset=0 do [self rawkbck]]' classified: falseUserView understands: 'workspace	[user notify: ''Not meant to be executed'']"XEROX - Learning Research Group user screenextent: 640580 tab: 050.NotifyFlag _ true.Changes init.user changedMessagesuser changedClassesuser changedCategoriesUndeclared contentsto set the default printerPrinterName_''Menlo''.PrinterName_(PressFile new) selectPrinter: PrinterName.to change phylum to access your accountuser releaseExternalViews. phylum name: ''name'' password: ''password''.dp0 filin: (''Changes.st'').(dp0 file: ''changes.st'') filout.(dp0 file: ''xxx'') edit.dp0 pressfilin: (''xxx.press'').(dp0 filesMatching: ''*.st'') sortdp0 list. dp0 freePagesdp0 delete: ''old''dp0 rename: ''old'' newName: ''new''for reinitializing Sources and phylumSources release. phylum release. Sources reopen.to make Smalltalk Sources local | s. s _ ''Smalltalk.Sources.''.(phylum asFtpDirectory) retrieve: ''<Smalltalk>'' + s + user versionName as: s; close.Sources on: (dp0 file: s).to switch back to remote SourcesSources close; on: (phylum file: ''<Smalltalk>Smalltalk.Sources.'' + user versionName).to filin a remote Smalltalk filephylum filin: (''<Small-goodies>xxx.st'').to print a remote/local press file(phylum pressfile: ''<Smalltalk>xxx.press'') toPrinter.(dp0 pressfile: ''xxx.press'') toPrinter: ''Lilac''.File noChanges.BitRect new fromuser; edit.user schedule: (defaultBitRectEditor newframe).DocumentEditor new defaultdocument: ''test''.DocumentEditor new init: (Document new fromPress: ''test.document'').user releaseExternalViews.E sleep. E kill. E _ nil.E _ Etherworld new. E broadcastFilter: true. E wakeup.Sources reopen.for primary Smalltalk access to file servers and printers at other sites.substitute yourserver for phylum above, compile this workspacePrinterName _ ''name-of-your-printer''.Smalltalk declare: yourserver.yourserver _ ILFileDirectory new directory: ''name-of-your-server''.yourserver name: ''Smalltalk-User'' password: ''Smalltalk''.Sources on: (yourserver file: ''<Smalltalk>Smalltalk.Sources.'' + user versionName).Changes init.user Swat."' classified: falseUserView understands: 'writeChangedMessages: ChangedMessages | class m ms [	"append changed messages to a file (usually on [phylum])"	ChangedMessages settoend; cr; cr; asParagraphPrinter stamp.	class _ ''''.	for m from: user changedMessages do		[ms_ m asStream.		(ms upto: 040)=class			[ChangedMessages append: '', ''; append: (ms upto: 040)]		ChangedMessages cr; append: m.		class_ m asStream upto: 040].	ChangedMessages close]' classified: falseUserView understands: 'writeSources: newSources [	"write a new Sources file (usually on [phylum]Smalltalk.Sources.xxx		(i.e. xxx = user versionName))	if it''s a new file or empty, write all Sources. otherwise it better be a copy of	the previous Sources file (only changes will be appended. do the copy with ftp)"	user file: newSources classes: SystemOrganization		changesOnly: (newSources end  false).	Sources close.	Sources _ newSources]' classified: falseVariableLengthClass understands: 'classInit		"gets propagated to a dummy instance"	[(self new: 1) classInit]' classified: falseVariableLengthClass understands: 'copy: inst | t i	[t _ self new: inst length.	for i to: inst length do		[ti _ insti]	t]' classified: falseVariableLengthClass understands: 'new	[user notify: ''use new: <Integer=length> here.'']' classified: falseVariableLengthClass understands: 'recopy: inst | t i	[t _ self new: inst length.	for i to: inst length do		[ti _ (insti) recopy]	t]' classified: falseMergingSources _ false.