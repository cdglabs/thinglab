Class new title: DrawingWindow	subclassof: ShapeWindow	fields: 'strokes'	declare: '';	classified: 'Windows'DrawingWindow understands: 'controlPoints	[ ()]'DrawingWindow understands: 'draw: function | i j s b t ps	[j _ 1.	while (j  strokes length) do [		s _ strokes  j.		ps _ s points.		b _ ps  1.		t _ self turtle: function.		t place: b.		i _ 2.		while (i  ps length) do [			t goto: (ps  i).			i _ i + 1].		j _ j + 1]]'DrawingWindow understands: 'strokes: aVector rect: rect	[strokes _ aVector.	self style: rect _ rect.	frame _ rect]'UserView understands: 'draw | strokes stroke win rect	[strokes _ Stream new of: (Vector new: 4).	rect _ Rectangle new origin: 00 corner: 00.	[RecogCursor showwhile [		while user ctrlKey do [			user anybug  [				stroke _ D1Stroke fromuser.				stroke points length > 0  [strokes next_ stroke]].			stroke  nil  [				rect _ Rectangle new encompass: (rect corners + stroke points)]]]].	stroke  [		win _ DrawingWindow new.		win setBounds: rect.		win strokes: strokes contents rect: rect.		user schedule: win]]' classified: 'as yet unclassified'UserView understands: 'run: topFlag | i w forward	"topFlag means sched1 already is awake"	[forward _ [topFlag [w_sched1. while w eachtime do []. w lasttime] true].	restartRequested _ false.	until restartRequested do		[i_0.		[forward or sched length = 0  []			self toBottom: w.			beTopWindow _ sched1].		until [(i_i+1) > sched length[]			w _ schedi.			w inactive  [false]			w firsttime] do [self runTicks]		i>sched length		"check for bug in empty space"			[user yellowbug[self bugScreenMenu].			user ctrlKey  [self draw].			user shiftKey[self recognize]]		sched promote: w.		while w eachtime do [self runTicks]		forward _ w lasttime.		beTopWindow _ nil]]' classified: 'as yet unclassified'