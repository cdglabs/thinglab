'Changes from (1 April 2023 4:00:33 pm )'FileNamePane understands: 'clipboardString | clip	"Sanitized somewhat by no CRs and reasonable length"	[clip _ TextImage new primClipboard.	[clip length > 100[clip _ ''clipboard string too long'']].	while [(clip find: 13) > 0]       "No CRs"		do [clip_ clip without: (clip find: 13)].	 clip]'FileNamePane understands: 'selected 	[valuePane showing: (user fileString: directory + self value)]'FileNamePane understands: 'setDirectory	[(Menu new stringFromVector:		(''Use "copy" in text to set this choice...'',		self clipboardString,		''default'',		'' cancel '')		) fbug		=2[directory _ TextImage new primClipboard. self update];		=3[directory _ ''''. self update]	]'FileNamePane understands: 'setFilter	[(Menu new stringFromVector:		(''Use "copy" in text to set this choice...'',		self clipboardString,		''default'',		'' cancel '')		) fbug		=2[filter _ TextImage new primClipboard. self update];		=3[filter _ ''*''. self update]	]'FileNamePane understands: 'update | win fileStrings	[fileStrings _ user fileStrings: directory matching: filter.		"awful hack to get at the dictionary being inspected:"	win _ user topWindow.   "Where there''s a will there''s a way"	win inspectee init: 4; insertall: fileStrings.	self of: fileStrings sort	]'FileNamePane understands: 'yellowbug | menu fileName file	[[selection > 0[fileName _ listselection]].	menu _ Menu new string: ''fileindeleteupdateset directoryset filterpublish update''.	scrollBar hidewhile 		[menu bug = 1  [selection = 0  [window flash]					user filin: fileName];			= 2  [selection = 0  [window flash]					user confirm: ''Really delete ''+ fileName						[user fileString: fileName_ nil]];			= 3  [self update];			= 4  [self setDirectory];			= 5  [self setFilter];			= 6  [selection = 0  [window flash]					file _ user fileString: fileName.					user fileString: (user update: fileName _ file) _ file.					user fileString: fileName _ nil]]	]'UserView understands: 'browseFiles | dict window dir filter   "user browseFiles"	[dict _ (Dictionary new: 10) insertall: user fileStrings.	dir _ ''''.	filter _ ''*''.	window _ InspectWindow new		of: dict varPane: (FileNamePane new directory: '''' filter: ''*'').	window title_ ''Files matching '' + filter.	user leaveTop; restartup: window]'UserView understands: 'fileStrings: directory matching: matching | fileNames match matches f	[[matching is: Vector  [] matching _ matching inVector].	fileNames _ self fileStrings: directory.	matches _ (Vector new: 16) asStream.	for match from: matching do [		[match length = 0 or match = ''*'' [ fileNames]		(match  1) = (''*''  1)   			[match _ match copy: 2 to: match length]].		for f from: fileNames do [			"Not just *.foo - now full inclusion"			(f findString: match startingAt: 1) > 0				 [matches next _ f]]].	matches contents]' classified: 'file stuff'