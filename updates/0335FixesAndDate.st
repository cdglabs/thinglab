'Fixes to tools, text and OpaqueForms plus enough of Date and Time to supply and print them'Class new title: Date	subclassof: Number	fields: 'year day'	declare: '';	classified: 'Numbers'Class new title: TextImage	subclassof: Textframe	fields: 'c1 c2 begintypein superimage oldEntity sel'	declare: 'on paste paragraphmenu ctlw doit right cut down pageup pagedown undo up end again home copy prompt all compile esc off Scrap scrap cancel left bs Deletion ';	classified: 'Text Objects'Class new title: Time	subclassof: Number	fields: 'h m s'	declare: '';	classified: 'Numbers'Class understands: 'understands: code classified: heading | cat sel		"compile and install method"	[cat _ heading.	[heading = false  [		sel _ Generator new pattern: code in: self.		cat _ self organization invert: sel.		cat = false  [cat _ ''as yet unclassified'']]].	 Generator new compile: code asParagraph		in: self under: cat notifying: self]' classified: 'accessing method dictionary'CodePane understands: 'browseMethodSpec: spec | pair cls sel code	"spec is a  ''Classselector'' string"	[spec first = (''~''1)[self showing: ''Sorry, code no longer available.You might try looking in the file, ''''recent changes'''''' asParagraph]	spec has: ''''1 		[pair _ spec splitAt: ''''1.		cls _ Smalltalk(pair1) unique.		sel_ (pair2) unique.		code _ cls code: sel.		self class: cls selector: sel para: code		]]' classified: 'menu messages'CodePane understands: 'classInit   "CodePane classInit."	[editmenu _ Menu new string: ''againcopycutpastedoitcompileundocancelsendersimplementers- - - - -insert pictureeffectlineheightalignment'']' classified: 'as yet unclassified'Date understands: 'day: day year: year | d	[while day > (d _ self daysinyear) do [		year _ year + 1.		day _ day - d].	while day  0 do [		year _ year - 1.		day _ day + self daysinyear].	]'Date understands: 'daysinyear 	[365 + self leap]'Date understands: 'fromDays: d [	"d = days since Jan 1 1901. There are 1461 days in a 4-year cycle.	2000 is a leap year, so no extra correction is necessary.	day:year: will fix things up"	d _ d asInteger intdiv: 1461.	self day: 1+ (d2) asSmall year: 1901+ ((d1) asSmall *4)]'Date understands: 'leap	[year \ 4 = 0 [		year \ 100 = 0 [year \ 400 = 0 [1] 0]		1]	0]'Date understands: 'month | m leap [	leap _ self leap.	for m from: 12 to: 1 by: 1 do [		(self monthday: m) < day [m]].	user notify: ''illegal month'']'Date understands: 'monthday: m "Return first day-in-year of m''th month"	[(0 31 59 90 120 151 181 212 243 273 304 334)m +		[m > 2 [self leap] 0]]'Date understands: 'monthnames	[ (January February March April May June		July August September October November December)]'Date understands: 'printon: strm	[self printon: strm format: (1 2 3 040 3 1)]'Date understands: 'printon: strm format: f | i m [	"f is print format.	1-3	positions to print day,month,year respectively	4	character separator	5	month format (1 month #, 2 first 3 chars, 3 entire name)	6	year format (1 year #, 2 year #\100)"	m _ self month.	for i to: 3 do [		[fi		=1 [day - (self monthday: m) printon: strm];		=2 [			f5			=1 [m printon: strm];			=2 [strm append: self monthnamesm(1 to: 3)]			strm append: self monthnamesm]		([f6=1 [year] year\100]) printon: strm].		i<3 [strm next _ f4 "separator"]]]'Date understands: 'weekday [  " ''Today is '' + user today weekday "	(Tuesday Wednesday Thursday Friday Saturday Sunday Monday)		self weekdayIndex]'Date understands: 'weekdayIndex | a d [	[day  (self monthday: 3) [		a _ year-1.		d _ 306]	a _ year.	d _ 59 - self leap].	"Tuesday=1,..., Monday=7"	d + day + a + (a/4) + (a/400) - (a/100) \ 7 + 1]'Form understands: 'asOpaqueForm | newForm	[newForm _ OpaqueForm new extent: extent.	newForm bits: bits copy.	newForm mask: self copy.  "Mask same as self - white there is opaque"	 newForm]'Form understands: 'displayat: pt effect: mode | bnds  "Specifically writes to the display"	[self displayat: pt effect: mode in: DisplayForm]' classified: 'as yet unclassified'Form understands: 'makeDisk | pen 	"(Form new extent: 5050) makeDisk displayat: 5050."	"(Form new extent: 5050) makeDisk		copyWithTransparentWhite displayat: 5050."	[pen _ Turtle new initOnForm: self.	pen color: black; width: 1; inking: oring.	pen circle: self extent x/2 at: self extent/2.	self shapeFill: black]'Form understands: 'makeDisk: color | disk 	"((Form new extent: 5050) makeDisk: gray) displayat: 5050."	[disk _ self makeDisk.	disk fill: disk bounds color: color mode: 12+anding.	 disk]'MovieWindow understands: 'demoSetup    "Move all this stuff into a MovieDemoWindow at some point"	"user schedule: (MovieWindow new title: ''Movie'' frame: Rectangle fromuser)."	"(user''Movie'') demoSetup."	| ballSize ball ball1 ball2 ball3 hole	[ballSize _ 6060.	ball _ (Form new extent: ballSize) makeDisk.	ball1 _ ball copy.	hole _ (Form new extent: ballSize*9/10) makeDisk: dkgray.	hole displayat: (ball1 extent/2) - (hole extent/2) effect: xoring in: ball1.	ball2 _ ball copy.	hole _ (Form new extent: ballSize*2/3) makeDisk.	hole displayat: (ball2 extent/2) - (hole extent/2) effect: xoring in: ball2.	ball2 _ ball2 asOpaqueForm.	ball3 _ ball copy.	hole _ (Form new extent: ballSize*9/10) makeDisk.	hole displayat: (ball3 extent/2) - (hole extent/2) effect: xoring in: ball3.	ball3 _ ball3 asOpaqueForm.	self style: balls _ (Vector new: 3) with: ball1 with: ball2 with: ball3.	self style: positions _ (Vector new: 3)		with: self workingFrame bounds center		with: self workingFrame bounds center		with: self workingFrame bounds center.	self style: velocities _ (Vector new: 3) with: 12 with: 21 with: 0.60.3.	self style: demo _ true.	self tick.	]'SelectorPane understands: 'yellowbug |	[selection = 0  [window flash]	scrollBar hidewhile 		[editmenu bug			= 1  [Smalltalk browseSendersOf: listselection];			= 2  [Smalltalk browseImplementersOf: listselection];			= 3  [organizationPane filout: list  selection];			= 4  [organizationPane spawn: list  selection with: codePane contents formerly: codePane oldContents];			= 5  [organizationPane forget: list  selection]]]' classified: 'as yet unclassified'TextImage understands: 'checklooks | t val mask oldval leading [	"see ParagraphEditor checklooks.	substitute c1 for loc1, c2 for loc2, oldEntity for oldpara, entity for para"	"Note: cmd-x gives 151 which used to give val=4 but no longer"	t _ (166 150 137 256   230 214 201 215		135 159 144 143 128 127 129 131 180 149		199 223 208 207 192 191 228 229) find: user kbck.	t=0[false]	user kbd.	oldval _ (para runAndVal: c1)  2.	val _ (1 2 4 256   1 2 4 256  "ctl-b i - x   B I  X"		0 16 32 48 64 80 96 112 128 144  "ctl-0 1 ... 9"		160 176 192 208 224 240 01F0H 0110H)t.  "ctl-shift-0 1 ... 5 + -"	[val=256[mask_ 0377.  val_ 0]		"reset all"	val<0[mask_ 0-val.  val_ 0]		"reset emphasis"	val>0 and val<16[mask_ val.		"toggle emphasis"		(oldval land: mask)=val[val _ 0]]	mask_ 0360.					"set font"	val>240  [val _ oldval + val]].		"inc/dec font"	para maskrun: c1 to: c2-1 under: mask to: val.	if mask = 0360	then [self lineheightAdjust; show.		"self replace: c1 to: c2 - 1 with: (para copy: c1 to: c2 - 1)"]	else [self displaylines: (self lineofchar: c1) to: (self lineofchar: c2)].	self select]' classified: 'as yet unclassified'TextImage understands: 'classInit  "TextImage classInit."	[bs _ 8.	ctlw _ 145.	esc _ 160.	cut _ 151.	copy _ 173.	paste _ 158.	doit _ 130. "doit key. doit char is 30"	prompt _ 167. "prompt key. prompt char is 20"	again _ 134.	all _ 136.	compile _ 138.	undo _ 153.	cancel _ 165.	left _ 193.	right _ 194.	up _ 195.	down _ 196.	pageup _ 197.	pagedown _ 198.	home _ 202.	end _ 203.	Deletion _ nullString.	Scrap _ Deletion.	on _ 1.	off _ 0.	paragraphmenu _ Menu new string: ''againcopycutpastedoitcompileundocancelalignfitresize'']' classified: 'as yet unclassified'TextImage understands: 'kbd | typed key del shift c	"For typing speed this processes all the keys already queued.	It returns when the queue is empty, or a special key was processed"	[c1 < c2 and self checklooks  []	typed _ Set new string: 16.	[begintypein  []	del _ Deletion.	Deletion _ self selection.	begintypein _ c1].	while [key _ user kbdnext. shift _ user shiftKey.	key] do		[self kbdSubstitute: key in: typed  []		key = bs 			[c1 < c2  [] "deleting selection happens below"			typed empty 				[c1 _ 1 max: c1 - 1.				begintypein _ begintypein min: c1]			typed skip: 1]		key = cut  [self copyselection] "because mapped to cmd-c"		key = copy  [self copyselection] "because mapped to cmd-c"		key = paste 			[" self paste" typed append: self scrap]		key = ctlw 			[ [typed empty  [] self replace: typed. typed reset. c1 _ c2].			c1 _ 1 max: c1 - 1.			while (c1 > 1 and (para  (c1 - 1)) tokenish) do				[c1 _ c1 - 1].			begintypein _ begintypein min: c1]		key = esc 			[ [typed empty  [] self replace: typed. typed reset. c1 _ c2].			self fintype.			c1 _ c2 - Scrap length.			self selectAndScroll]		key = 167  "doit prompt"			[typed next_ 20; space]		key = all 			[[typed empty  [] self replace: typed].			self unselect. begintypein _ c1 _ 1. c2 _ para length + 1.			self select]		key = again 			[[typed empty  [] self replace: typed].			[begintypein = c1  [begintypein _ false. Deletion _ del]].			self again]		key = undo 			[self undo]		key = tab 			[c1 = c2  [typed next_ key]			self indent: user shiftKey]		(self kbdCheckForCursorKey: key typed: typed shift: shift)  nil  false 			[ self]		typed next_ key].	self replace: typed.	c1 _ c2.	self selectAndScroll]' classified: 'as yet unclassified'TextImage understands: 'kbdCheckForCursorKey: key typed: typed shift: shift | c	"Helper method so kbd is not too big"	[	key = left 			[[typed empty  [] self replace: typed].			self cursorBackward c to c - 1 shift: shift]		key = right 			[[typed empty  [] self replace: typed].			self cursorForward c to c + 1 shift: shift].		key = up 			[[typed empty  [] self replace: typed].			self cursorBackward c to (self charofpt: (self pointofchar: c) - (0self lineheight)) shift: shift]		key = down 			[[typed empty  [] self replace: typed].			self cursorForward c to (self charofpt: (self pointofchar: c) + (0self lineheight)) shift: shift]		key = pageup 			[[typed empty  [] self replace: typed].			self cursorBackward c to (self charofpt: (self pointofchar: c) - (0window height)) shift: shift]		key = pagedown 			[[typed empty  [] self replace: typed].			self cursorForward c to (self charofpt: (self pointofchar: c) + (0window height)) shift: shift]		key = home 			[[typed empty  [] self replace: typed].			self cursorBackward c to [while (c > 1 and para(c-1)  cr) do [c _ c - 1]. c] shift: shift]		key = end 			[[typed empty  [] self replace: typed].			self cursorForward c to [while (c  para length and parac  cr) do [c _ c + 1]. c] shift: shift]		 nil "means not found"]'TextImage understands: 'scrap | clip	[clip _ self primClipboard.	[(Scrap is: Paragraph) and (Scrap text = clip)  []	Scrap _ clip asParagraph].	 Scrap]'Time understands: 'fromSeconds: sec [	"seconds since midnight (adjusted for time zone and DST)"	sec _ sec asInteger intdiv: 3600.	h _ (sec1) asSmall.	sec _ (sec2) asSmall.	m _ sec / 60.	s _ sec \ 60]'Time understands: 'printon: strm "Format is h:mm:ss am/pm" [	strm print: [h>12[h-12]; <1[12] h];		append: [m < 10 ['':0''] '':'']; print: m;		append: [s < 10 ['':0''] '':'']; print: s;		space append: [h<12[''am''] ''pm'']]'UserView understands: 'convertTime: s returnSecs: format | d dd t dfirst dlast m570 m571 [ 	"s is total seconds from midnight Jan 1 1901 GMT (Greenwich mean time).	see maxc <AltoDocs>AltoTime.Press for details"	false["Old code to adjust for time zone"		m570 _ mem0570. m571 _ mem0571.		s _ s + (([m570  0 ["west" 1] "east" 1]) * (			(3600 * ("hours" m570 bits: (1 to: 4))) +			(60 * ("additonal minutes" m571 bits: (1 to: 6)))))]	t _ s intdiv: 24*3600."Days since 1901, seconds since midnight"	"current day (in local standard time)"	d _ Date new fromDays: t1.	[format [] t _ Time new fromSeconds: t2].	[false  [ "check for DST. correct DST parameters for nonleap years		and round to previous Sunday if necessary"		"day of the year on or before which DST takes effect"		dfirst _ m570 land: 0777 "bits: (7 to: 15)".		[[dfirst = 366 ["DST not in effect" false]		(dd _ d day)  (dfirst _ dfirst + d leap - 1) [			"day of the year on or before which DST ends"			dlast _ (m571 land: 0777 "bits: (7 to: 15)") + d leap - 1.			dd < dlast "if false, definitely after" and			dd < ((Date new day: dlast year: d year) previous: 6) day]		"possibly earlier than or at beginning of range"		dd  ((Date new day: dfirst year: d year) previous: 6) day] [			"daylight savings time in effect. add an hour"			format [s _ s + 3600]			t hours = 23 [				d _ d+1.				t hours: 0]			t hours: t hours+1]]]].	"return either total seconds or Date and Time"	format [s]	 d , t]' classified: 'as yet unclassified'UserView understands: 'kbdnext | key   "user kbd"	[self kbck  [key _ self kbd. "user cr; print: key."  key]	false]' classified: 'as yet unclassified'UserView understands: 'rawtotalsecs "user rawtotalsecs - Returns the number of seconds since 1901"	[self croak] primitive: 71' classified: 'as yet unclassified'VariablePane understands: 'compile: code | pair 	[(self value is: String) 		[pair _ self value classAndSelector.		pair  nil  [].		"Case of a method spec pair. . ."		 pair first understands: code text classified: false]	window flash.	false]' classified: 'creating method dictionary'Window understands: 'lasttime	[self leave.	exitflag]' classified: 'as yet unclassified'Form derstands: 'copyWithTransparentWhite' unique.CodePane classInitTextImage classInit