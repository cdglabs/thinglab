'Restore class orgs for Class and VariableLengthClass'Class organization fromParagraph:'''Classes are the molecules of Smalltalk. The instance fields specify the number and naming of fields for each instance, and the messages define the protocol with which these objects may be communicated. Classes inherit the fields and message protocol of their superclass. Locally defined messages will override inherited ones of the same name, and overriden ones may be accessed through the use of super in place of self. A typical class definition looks like:    Class new title: ''''CodeEditor'''';        subclassof: Window;        fields: ''''pared class selector'''';        declare: ''''editmenu''''This ordering is required, though the subclassof: and declare: messages are optional. A class definition may be re-executed but, if the fields: clause has changed, all instances of the old class will become obsolete (they will fail to respond to any messages).''(''Initialization'' abstract bytesize: classInit declare: fields: fixSubClassesOf: initClass myinstvars_ obsolete realself rename: sharing: subclassof: title: title:insystem: title:subclassof:fields:declare: veryspecial: )(''Access to parts''  _ declareString fieldNamesInto: instsize instvars invertRef: Isa: md superclass title )(''Organization'' classvars clean environment organization organizationChanged wholeEnvironment )(''Editing'' ed: edit: edit:para:formerly: execute: )(''Message access'' canUnderstand: canunderstand: code: compileall copy:from: copy:from:classified: decompile: derstands: describe:on: messages method: notify:at:in: selectors shrink space understands: understands:classified: whosends: )(''Instance access'' allInstances copy: default howMany init init: instfield: new new: print:on: printon: recopy: )(''Filin and Filout'' definition filout filoutOn: noChanges printdefon: printMethod:on: printOrgOn: )(''System Organization'' category category: moveFromCat:to: )(''As yet unclassified'' allSubclasses allSuperclasses browseAllSourceWIthString: checkOrganization checkOrganization: classified: compileFrom:to: decompileall: environment_ fieldsString forget: fromuser inheritanceText install:method:literals:code:backpointers: printForget:on: sourceStringAt: sourceStringReferencesTo: subclasses subclassesText: withAllSubclasses withAllSuperclasses withSubclassesText: )' asParagraph for: ClassVariableLengthClass organization fromParagraph:'''I am a class whose instances have numbered elements instead of named fields.''(''Initialization'' classInit )(''Instance access'' copy: new new: recopy: )' asParagraph for: VariableLengthClass