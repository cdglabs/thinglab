Rectangle understands: 'blt: destPt mode: mode 	[DisplayBLTer bltrect: self topt: destPt mode: (mode land: 3) color: 0]' classified: 'as yet unclassified'Rectangle understands: 'blt: destPt mode: mode clippedBy: clipRect | blt	[blt _ DisplayBLTer copy.	blt window: clipRect.	blt bltrect: self topt: destPt mode: (mode land: 3) color: 0]' classified: 'as yet unclassified'Rectangle understands: 'bltcomp: destPt mode: mode 	[DisplayBLTer bltrect: self topt: destPt mode: 4 + (mode land: 3) color: 0]' classified: 'as yet unclassified'Rectangle understands: 'brush: destPt mode: mode color: color 	[DisplayBLTer bltrect: self topt: destPt mode: 8 + (mode land: 3) color: color]' classified: 'as yet unclassified'Rectangle understands: 'brush: destPt mode: mode color: color clippedBy: clipRect | blt	[blt _ DisplayBLTer copy.	blt window: clipRect.	blt bltrect: self topt: destPt mode: 8 + (mode land: 3) color: color]' classified: 'as yet unclassified'RemoteCode understands: 'value_ value 	[user croak] primitive: 39' classified: 'control'ScrollBar understands: 'eachtime | mousePt middleX vertStrip 	[mousePt _ user mp.	rect has: mousePt 		[middleX _ rect center x - 2.		mousePt x < middleX 			["Cursor in left side. . ."			vertStrip _ Rectangle new origin: rect origin corner: middleX  rect maxY.			DownCursor showwhile 				[while [mousePt _ user mp.				vertStrip has: mousePt] do					[self slide: mousePt  [owner scrollTo: (position minY - rect minY - 4) asFloat / (rect height - 12)]					user redbug  [self reposition 							[owner scrollUp: rect origin y - mousePt y.							user waitnobug]]					user idle].				nil]]			"Cursor in right side. . ."			vertStrip _ Rectangle new origin: middleX  rect minY corner: rect corner.		UpCursor showwhile 			[while [mousePt _ user mp.			vertStrip has: mousePt] do				[self slide: mousePt  [owner scrollTo: (position minY - rect minY - 4) asFloat / (rect height - 12)]				user redbug  [self reposition 						[owner scrollUp: mousePt y - rect origin y.						user waitnobug]]				user idle].			nil]]	false]' classified: 'as yet unclassified'ScrollBar understands: 'slide: mousePt | clicked 	[position has: mousePt 		[JumpCursor showwhile 			[clicked _ false.			while ((position has: user mp) and clicked  false) do				[user redbug 					[clicked _ true.					while user redbug do						[self reshow 							[position moveto: position origin x  ((user mp y max: rect origin y + 4) min: rect corner y - 12).							owner scrollTo: (position minY - rect minY - 4) asFloat / (rect height - 12)].						user idle]].				user idle].			nil].		clicked]	false]' classified: 'updating'Set understands: ' index 	[array  index]' classified: 'as yet unclassified'Set understands: ' index _ item 	[position + 1 = index  [self next_ item]	array  index _ item]' classified: 'as yet unclassified'StackPane understands: 'separator: sep   "ignored" 	[]' classified: 'as yet unclassified'StackPane understands: 'trailer: trl  "ignored" 	[]' classified: 'as yet unclassified'StackPaneNT understands: 'context: tempPane instance: instPane code: cPane 	[contextVarPane _ tempPane.	instanceVarPane _ instPane.	codePane _ cPane.	variables _ Stream new of: (Vector new: 16).	proceed  nil  [proceed _ false , nil , 1]]' classified: 'as yet unclassified'Stream understands: ' item | nextItem 	["Look ahead for a matching item"	nextItem _ self next.	nextItem 		["return match and advance if found"		item = nextItem  [nextItem]		"Return false and dont advance if no match"		position _ position - 1.		false]	false]' classified: 'as yet unclassified'Stream understands: 'into: vec | i  	[for i to: vec length do		[vec  i _ self next].	vec]' classified: 'as yet unclassified'Stream understands: 'next: nItems | result i	[result _ array species new: nItems.	for i to: nItems do		[result  i _ self next].	result]' classified: 'accessing'Stream understands: 'nextNumber: nBytes _ num | bytes	[num is: Integer 		[self next: (nBytes - 2) _ 0.		self nextword_ num]	bytes _ num bytes.	bytes length > nBytes  [user notify: ''number too big'']	self next: (nBytes - bytes length) _ 0.	self append: bytes reverse]' classified: 'as yet unclassified'Stream understands: 'nextPoint_ pt 	[self nextword_ pt x.	self nextword_ pt y]' classified: 'as yet unclassified'Stream understands: 'next_ nextItem 	[self myend  [self pastend_ nextItem]	position _ position + 1.	array  position _ nextItem] primitive: 19' classified: 'as yet unclassified'Stream understands: 'printchanges: chgs | selector class chgItem forgetIt 	[chgs empty  [chgs]	chgs _ chgs asStream.	until chgs empty do		[forgetIt _ false.		chgItem _ chgs next.		user show: chgItem.		chgItem _ chgItem asStream.		[chgItem peek = (''~''1) 			[chgItem next.			forgetIt _ true]].		class _ Smalltalk  (chgItem upto: 32) unique.		selector _ (chgItem upto: 32) unique.		forgetIt  [class printForget: selector on: self]		chgItem _ class organization invert: selector.		class printMethod: selector on: self]]' classified: 'as yet unclassified'Stream understands: 'printForget: selector class: class 	[user cr.	user show: ''~'' + class title + '' '' + selector.	self print: (class title + '' derstands: '' + selector + ''.^'') asParagraph]' classified: 'as yet unclassified'String understands: 'asInteger | sign base maxDigit digit value i starti endi  	[self length = 0  [0]	starti _ 1.	endi _ self length.	sign _ [self  1 = (''''1) 				[starti _ 2.				1]			1].	base _ [self  self length = (''H''1) 				[endi _ endi - 1.				16]			self  starti = (''0''1)  [8]			10].	maxDigit _ [base = 16  [70]			47 + base].	value _ [self length > 4  [0.0]			0].	for i from: starti to: endi do		[digit _ self  i.		digit < 48 or: digit > maxDigit  [user notify: self + '' isn''''t a valid Integer'']		value _ value * base +			[digit  57  [digit - 48]  "0-9"					digit - 55  "hex A-F"]].	[value > 32767 		[base = 8 or base = 16 			[sign = 1 				[value < 65536  [(value - 65536) asInteger]				user notify: ''Warning: Octal or Hex number exceeds 16 bits'']]]].	(value * sign) asInteger]' classified: 'converting'String understands: 'copy: start to: stop with: source from: sourceStart to: sourceStop | i  	[self  source and (sourceStart < start and sourceStop  start) 		["in-place replacement must go backwards"		for i from: stop - start to: 0 by: 1 do			[self  (start + i) _ self  (sourceStart + i)]]	source copy: sourceStart to: sourceStop to: (Stream new of: self from: start to: stop)]' classified: 'as yet unclassified'String understands: 'inBase: base | isNeg i digit value lgbase  	" ''123456789'' inBase: 10 "	[[self  1 = (''''1)  [isNeg _ true] isNeg _ false].	value _ 0 asLarge.	lgbase _ base asLarge.  "convert only once"	for i from: [isNeg  [2] 1] to: self length do		[digit _ self  i.		value _ value * lgbase +				[digit  65  [digit - 65 + 10  "hex"]				digit - 48  "decimal"]].	isNeg  [value negated]	value]' classified: 'as yet unclassified'String understands: 'replace: a to: b by: rep from: c to: d | s t 	[s _ self species new: self length + (d - c) - (b - a).	"See Array concat:"	t _ Stream new of: s.	self copy: 1 to: a - 1 to: t.	rep copy: c to: d to: t.	self copy: b + 1 to: self length to: t.	s]' classified: 'as yet unclassified'String understands: 'run: a in: context 	[user croak] primitive: 55' classified: 'as yet unclassified'StyleSheet understands: 'font: fontIndex 	[fontset  fontIndex]' classified: 'accessing'StyleSheet understands: 'fontset: set 	[fontset _ set.	self fontset: fontset lineheight: fontset height linelead: 0 baseline: fontset baseline tabsize: 32 spacesize: 4 effect: storing]' classified: 'as yet unclassified'StyleSheet understands: 'fontset: set lineheight: ht linelead: ld baseline: base tabsize: tab spacesize: space effect: storemode 	[fontset _ set.	lineheight _ ht.	linelead _ ld.	baseline _ base.	tabsize _ tab.	spacesize _ space.	effect _ storemode]' classified: 'as yet unclassified'StyleSheet understands: 'NoteTakerize	[(fontset  0) NTformat]' classified: 'as yet unclassified'SymbolTable understands: 'rehash | i copy	[ "Faster to build new than to grow"	copy _ SymbolTable new init: self size.	for i to: objects length do		[objects  i  nil  []		copy insert: objects  i withref: values  i].	self copyfrom: copy]' classified: 'private'SystemDictionary understands: 'help  "Smalltalk help"	[user schedule: (CodeWindow new title: ''Useful expressions'' para: (SystemDictionary code: help)).	"	Smalltalk browseChanges. 	Changes init.	user sched inspect -> vector of windows	user schedule: ProjectSorter init.	Undeclared inspectWithTitle: ''Undeclared''.	Undeclared forgetUnreferencedEntries.  	Smalltalk inspectWithTitle: ''Smalltalk''.	Smalltalk allGlobals inspectWithTitle: ''Globals''.	Window browseAllSourceWIthString: ''exitflag''.	Smalltalk browseAllSourceWIthString: '' t1 ''.	Smalltalk browseSendersOf: unique.	Smalltalk browseImplementersOf: title:rocessFrame:.	user filoutWindowsOn: ''wintest.st''. 	Smalltalk _ SystemDictionary new copyfrom: Smalltalk.		Things to clean up. . .	Dorado, Notetaker, hardcopy, MethodKeeper, goBaby		beAlto, NTCursor, 	CompiledMethod holdLiterals has bitBlt to nil ?? but works	CompiledMethod numArgs:. crashes at BitBlt new bltObj:		when edited in browser, but can compileAll	MethodDict insert:method: etc		same but can compileAll	Decompiler/compile barfs onTextImage classInit		and UserView bugScreenMenu		and Window styleEdit		These all have many literals	Decompile/install gives scrollbar fibrillation		This is because the decompile of ListPaneeachtime		differs from its intended code  Try it: browse with 		shift key down (decompile) or not	"	]'SystemPane understands: 'to: clPane 	[classPane _ clPane]' classified: 'converting'