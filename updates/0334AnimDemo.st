'Various changes to support double-buffered animation and opaque forms'Smalltalk declare: anding as: 3.Smalltalk declare: compSource as: 4.Class new title: MovieWindow	subclassof: AnimWindow	fields: ''	declare: '';	classified: 'Windows'Class new title: OpaqueForm	subclassof: Form	fields: 'mask'	declare: '';	classified: 'Graphical Objects'Array understands: 'first 	[ self1]' classified: 'accessing'Array understands: 'second 	[ self2]' classified: 'accessing'Array understands: 'third	[ self3]'Array understands: 'with: first	[self1_ first.	 self]'Array understands: 'with: first with: second 	[self1_ first.	self2_ second.	 self]' classified: 'accessing'Array understands: 'with: first with: second with: third 	[self1_ first.	self2_ second.	self3_ third.	 self]'Form understands: 'black  	[self fill: self bounds color: black]' classified: 'coloring'Form understands: 'black: rect	[self fill: rect color: black]' classified: 'as yet unclassified'Form understands: 'bounds 	[ 00 extent: self extent]'Form understands: 'asOpaqueForm | newForm	[newForm _ OpaqueForm new extent: extent.	newForm bits: bits copy.	newForm mask: self copy.  "Mask same as self - white is transparent"	 newForm]'Form understands: 'fill: rect color: color	[ self fill: rect color: color mode: 12 "constant fill"]'Form understands: 'fill: rect color: color mode: mode	| blt	[blt _ BitBlt new destForm _ self.	blt bltrect: rect topt: rect origin mode: mode color: color]'Form understands: 'makeDisk | pen 	"(Form new extent: 5050) makeDisk displayat: 5050."	[pen _ Turtle new initOnForm: self.	pen color: black; width: 1; inking: oring.	pen circle: self extent x/2 at: self extent/2.	self shapeFill: black]'Form understands: 'makeDisk: color | disk 	"((Form new extent: 5050) makeDisk: gray) displayat: 5050."	[disk _ self makeDisk.	disk fill: disk bounds color: color mode: 12+anding.	 disk]'Form understands: 'shapeFill: aMask	"Fill the interior of the outtermost outlined region in the receiver.  	The outlined region must not be concave by more than 90 degrees.  	Typically aMask is Color black, to produce a solid fill. 	Then the resulting form is used with fillShape: to paint a solid color."	| destForm tempForm dir sourceRect	[destForm _ Form new extent: self extent.  destForm black.	sourceRect _ self bounds.	for dir from: (00) fourNeighbors do		["Smear self in all 4 directions, and AND the result"		tempForm _ self copy.		tempForm smear: dir distance: (dir dotProduct: tempForm extent) abs.		tempForm copy: sourceRect to: 00 in: destForm effect: 3.  "AND"		].	 destForm]'Form understands: 'smear: dir distance: dist 	"Smear any black pixels in this form in the direction dir in Log N steps"	| skew destPt sourceRect	[sourceRect _ 00 extent: self extent.	skew _ 1.	while [skew < dist] do		[destPt _ dir*skew.		self copy: sourceRect to: destPt in: self effect: oring.		skew _ skew+skew]	]'Form understands: 'white | i	["sets all bits in the form to white ( to zeros)"	 self fill: self bounds color: white]' classified: 'coloring'Form understands: 'white: rect	[self fill: rect color: white]'MovieWindow understands: 'demoSetup    "Move all this stuff into a MovieDemoWindow at some point"	"user schedule: (MovieWindow new title: ''Movie'' frame: Rectangle fromuser)."	"(user''Movie'') demoSetup."	| ballSize ball ball1 ball2 ball3 hole	[ballSize _ 6060.	ball _ (Form new extent: ballSize) makeDisk.	ball1 _ ball copy.	hole _ (Form new extent: ballSize*9/10) makeDisk: dkgray.	hole displayat: (ball1 extent/2) - (hole extent/2) effect: xoring in: ball1.	ball2 _ ball copy.	hole _ (Form new extent: ballSize*2/3) makeDisk.	hole displayat: (ball2 extent/2) - (hole extent/2) effect: xoring in: ball2.	ball2 _ ball2 asOpaqueForm.	ball3 _ ball copy.	hole _ (Form new extent: ballSize*9/10) makeDisk.	hole displayat: (ball3 extent/2) - (hole extent/2) effect: xoring in: ball3.	ball3 _ ball3 asOpaqueForm.	self style: balls _ (Vector new: 3) with: ball1 with: ball2 with: ball3.	self style: positions _ (Vector new: 3)		with: self workingFrame bounds center		with: self workingFrame bounds center		with: self workingFrame bounds center.	self style: velocities _ (Vector new: 3) with: 12 with: 21 with: 0.60.3.	self style: demo _ true.	self tick.	]'MovieWindow understands: 'demoTick    "Update ball positions and display on next frame"	| balls positions velocities PandV innerRect ball view disk t i	[balls _ self style: balls.	positions _ self style: positions.   "Eek, these should be properties of particles! . . ."	velocities _ self style: velocities.	for i to: balls length do		[ball _ ballsi.		innerRect _ self workingFrame bounds inset: ball extent/2.		PandV _ positionsi moveBy: velocitiesi andBounceIn: innerRect.		(self style: positions)i_ PandV first.		(self style: velocities)i_ PandV second.		[i=3 and (self style: CameraView)falsefalse["Special view ball reads from display"			disk _ (Form new extent: ball bounds extent) makeDisk.			disk displayat: (ball extent/2) - (disk extent/2) effect: storing in: ball.			disk _ (Form new extent: ball bounds extent*9/10) makeDisk.			disk displayat: (ball extent/2) - (disk extent/2) effect: 4+anding in: ball.			"circular clipping too"			view _ Form new fromrectangle: (ball bounds translate: user mp).			disk _ (Form new extent: view bounds extent*9/10) makeDisk.			t_ Form new extent: ball extent. disk displayat: (view extent/2) - (disk extent/2) effect: storing in: t.			t displayat: (view extent/2) - (t extent/2) effect: anding in: view.			view displayat: 00 effect: oring in: ball.]].		ball displayat: PandV first - (ball extent/2) in: self workingFrame.		]	]'MovieWindow understands: 'fixframe: rect	[frames _ Vector new: 2.  "just the two buffers"		frames1 _ Form new extent: rect extent.		frames2 _ Form new extent: rect extent.	current _ 1.	form _ framescurrent.	rect]'MovieWindow understands: 'showNextFrame	[self workingFrame black: ((15*current)5 extent: 1010).	super showNextFrame.	self workingFrame white]'MovieWindow understands: 'testBuffering | f pen	"AnimWindow new testBuffering"	["Start by reusing this class from Alan. . ."	"Create a window on screen with two buffers in frame array"	"rect _ Rectangle fromuser."	f _ Form new extent: 5050.		pen _ Turtle new initOnForm: f.		pen color: black; width: 2; inking: oring.		pen circle: 22 at: (2525).	(f shapeFill: black) displayat: 00]" | turtle i rot rect	[turtle _ Turtle init. turtle color: black; width: 3; inking: oring.	rect _ user screenrect center-(100100) extent: 200200.	for rot from: 1 to: 90 by: 10 do		[rect clear: white.		turtle home; up;  turn: rot.		for i to: 50 do [turtle go: i * 4; turn: 89]]]. | turtle i r rect a c d 	[turtle _ Turtle init. turtle color: black; width: 3; inking: oring.	rect _ user screenrect center-(100100) extent: 200200.	turtle home; up.	d _ 5. a_ 3. c _ 360.0*d/a. r_c/2 pi.	turtle goto: user mp; up; turn: 90; go: 0-r; turn: 90.			for i to: 360/a do		[turtle go: d ; turn: a]]."'MovieWindow understands: 'tick	[ [self style: demo  [self demoTick]].	self showNextFrame]'MovieWindow understands: 'title: title frame: rect 	"user schedule: (MovieWindow new title: ''Movie'' frame: Rectangle fromuser)."	" Inheritance. . .	MoviewWindow	   AnimWindow: frames current stepTime	      FormWindow: form effect turtlemode	         Window: frame collapsed titlepara growing exitflag style bits"	| win 	[win _ super title: title frame: rect.   "calls fixFrame. . ."	stepTime _ 200.   "milliseconds, that is"	 win]'MovieWindow understands: 'workingFrame 	"This is the frame where we paint the next world"	[ frames(3-current)]'Number understands: 'pi   "2 pi"	[ 3.14159265 * self]'OpaqueForm understands: 'displayat: pt in: destForm  	[mask displayat: pt effect: compSource+anding "erase mode" in: destForm.	self displayat: pt effect: oring in: destForm]'OpaqueForm understands: 'mask: maskForm	[mask _ maskForm]'Point understands: 'dotProduct: other 	[ (x * other x) + (y * other y)]'Point understands: 'fourNeighbors | strm   "(00) fourNeighbors"	[strm _ Stream new of: (Vector new: 4).	strm next_ self + (10);		next_ self + (01);		next_ self + (10);		next_ self + (01).	 strm contents]'Point understands: 'moveBy: velocity andBounceIn: aRect	"Move this point one step along its velocity vector	and make it bounce if it goes outside the given rectangle.	Returns updated position and velocity."	| vx vy px py  	[vx _ velocity x.		vy _ velocity y.	px _ self x asFloat + vx.	py _ self y asFloat + vy.	[px > aRect rightside  [		px _ aRect rightside - (px - aRect rightside).		vx _ velocity x negated]].	[py > aRect bottom  [		py _  aRect bottom - (py - aRect bottom).		vy _ velocity y negated]].	[px < aRect leftside  [		px _ aRect leftside - (px - aRect leftside).		vx _ velocity x negated]].	[py < aRect top  [		py _  aRect top - (py - aRect top).		vy _ velocity y negated]].	 (Vector new: 2) with: pxpy with: vxvy]'Rectangle understands: 'leftside	[origin x]' classified: 'as yet unclassified'Rectangle understands: 'rightside	[corner x]' classified: 'as yet unclassified'Turtle understands: 'circle: radius at: pt 	" | t [t _ Turtle init. t color: black; width: 3; inking: oring. t circle: 50 at: user mp]."	 |  i r n a d 	[a_ 3.  n_360.0/a. "number of segments"	r _ radius asFloat.  d_ 2.0 pi*r/n.  "length of each"	self place: pt - (r0); up.	for i to: n do		[self go: d; turn: a]]'Turtle understands: 'initOnForm: form | rect	[sourceraster _ 0.	sourcebase _ sourceraster.	super init.	rect _ 00 extent: form extent.	super destForm_ form.	self frame: rect.	self clipTo: frame.	self pendn.	self color: black.	self width: 1.	self inking: oring.	self home.	self up]'UserView understands: 'changeLog logVar do writer | log old n	[FilinSource  nil  ["do not log filins"]	log _ Stream default.	logVar value_ log.	writer value.	log next_ 30; cr.	old _ user fileString: ''recent.changes''.	[old  nil  [old _ '''']].	old _ old asStream.	[old limit  20000  []		old position_ old limit - 20000; skipTo: 30; skipTo: 13].	user fileString: ''recent.changes'' _ old rest + log contents]' classified: 'file stuff'UserView understands: 'filout: fName | outStrm "user filout: ''Changes-'' + ((user now1) asString copy: 1 to: 6)+''.st'' "	[outStrm _ Stream default.	self filoutChanges: Changes contents sort on: outStrm.	user fileString: fName _ outStrm contents]' classified: 'file stuff'VariablePane understands: 'yellowbug | menu cr sself pair 	"Dan: we should really have different pane classes for these cases. . ."	[cr _ 13 inString.	selection = 0  [window flash]	sself _ values1.	[menu _ varmenu.		sself is: Dictionary 			[((self value is: String) and [self value has: ''''1]) 				[menu _ Menu new string: ''inspectcopy nameremovebrowsesendersimplementers''].			menu _ Menu new string: ''inspectcopy nameremovebrowse'']		sself Is: SymbolTable 			[menu _ Menu new string: ''inspectcopy nameremoveshow references'']		].	scrollBar hidewhile 		[menu bug = 1  [self value inspect];			= 2  [TextImage new primClipboard_ listselection];			= 3  [user confirm: ''remove '' + (listselection) + '' from this list?''  						[values1 delete: listselection]];			= 4  [sself is: Dictionary 					[Smalltalk browseMethodSpec: sself(listselection)]				  values1 browseAllRefsTo: listselection];			= 5  ["already checked for '''' above"					pair _ sself(listselection) splitAt: ''''1.					Smalltalk browseSendersOf: (pair2) unique];			= 6  [pair _ sself(listselection) splitAt: ''''1.					Smalltalk browseImplementersOf: (pair2) unique]]	]' classified: 'as yet unclassified'Window understands: 'title: title frame: rect 	[frame _ self fixframe: rect.	growing _ false.	title  nil  [].	self title_ title]'