'Includes removal of most NoteTaker tests and nice support for browsing senders, implementers and global references'Array understands: 'replace: start to: end by: replacement | newArray arrStrm 	[newArray _ self species new: self length + replacement length - (1 + end - start).	arrStrm _ newArray asStream.	self copy: 1 to: start - 1 to: arrStrm.	replacement copy: 1 to: replacement length to: arrStrm.	self copy: end + 1 to: self length to: arrStrm.	newArray]' classified: 'as yet unclassified'BitBlt understands: 'bltObj: t1 field: t2 to: t3 fromObj: t4 field: t5 	[dest _ t1.	desty _ t2.	source _ t4.	sourcey _ t5.	desty < 1  [user notify: ''bltObj field spec is 1-origin, like vectors'']	clipx _ 0.	destx _ clipx.	sourcex _ destx.	clipwidth _ 16.	width _ clipwidth.	clipheight _ t3 - desty + 1.	height _ clipheight.	desty _ desty - 1.	clipy _ desty.	sourcey _ sourcey - 1.	[source  nil 		[color _ 0.		function _ 12]	function _ 0.	color _ function].		sourcebase _ source.		destbase _ dest.		destraster _ 2.		sourceraster _ destraster.		destfield _ 1.		sourcefield _ destfield.		self callBLT]' classified: 'as yet unclassified'BitBlt understands: 'checksandcall | t1 t2 	["Handle most needed fixups in calls on BitBlt"	user notify: ''Not yet supported in St-78''.	function _ function land: 15.	[destbase class  String 		[t1 _ destbase.		destbase _ [dstrike  [t1 lock + 9]				t1 lock]]	destbase  281  [function _ function + 16]].	[sourcebase class  String 		[t2 _ sourcebase.		sourcebase _ [sstrike  [t2 lock + 9]				t2 lock]]	sourcebase  281  [function _ function + 32]].	self callBLT.	[t1  nil  []	destbase _ t1 unlock].	t2  nil  []	sourcebase _ t2 unlock]' classified: 'as yet unclassified'BitBlt understands: 'destForm_ t1 	[dest _ t1.	self clipTo: (0  0 rect: dest extent).	destraster _ dest width + 15 / 16.	destfield _ dest height + 1 / 2 * destraster.	destbase _ dest bits]' classified: 'as yet unclassified'BitBlt understands: 'release: t1 	[dest  DisplayForm 		[destbase _ nil.		dest _ destbase]]' classified: 'as yet unclassified'BitBlt understands: 'toDisplay 	[self destForm_ DisplayForm.	source  nil  [self sourceForm_ DisplayForm]]' classified: 'as yet unclassified'Class understands: 'compileall | sel priorChanges	 "user loadUpdatesThrough: 312"	" | c. for c from: user classNames do		[c < ''Aa''[]		c = CompiledMethod[]		user cr; show: c.		(Smalltalkc) compileall].  "	[priorChanges _ Changes copy.	for sel from: messagedict contents do		[self understands: (self code: sel)].	Changes _ priorChanges.	self  Object  [nil installError]	MessageDict new freeMethods]'Class understands: 'edit: selector | para s v	[para _		[selector=ClassOrganization			[self organization asParagraph]		messagedict has: selector[self code: selector]		nullString asParagraph].	self edit: selector para: para formerly: false]'Class understands: 'edit: selector para: para formerly: oldpara	[user leaveTop.	user restartup: (CodeWindow new class: self selector: selector para: para formerly: oldpara)]' classified: 'as yet unclassified'ClassPane understands: 'classInit   "ClassPane classInit. "	[editmenu _ Menu new string: ''filoutprintforgetspawnreferencesclassvars'']' classified: 'as yet unclassified'ClassPane understands: 'yellowbug | bug 	[selection = 0  [window flash]	bug _ editmenu bug.	bug = 1  [(Smalltalk  (list  selection)) filout]	bug = 2  [(Smalltalk  (list  selection)) printout]	bug = 3  [systemPane forget: list  selection]	bug = 4  [user schedule: (BrowseWindow new browseClass: (Smalltalk  (list  selection))). user run: true]	bug = 5  [Smalltalk browseAllRefsTo: list  selection]	bug = 6  [(Smalltalk  (list  selection)) classvars inspect]	]' classified: 'as yet unclassified'CodeWindow understands: 'class: cls selector: sel para: para formerly: formerly | pane 	[pane _ CodePane new class: cls selector: sel para: nil.	self title: cls title + '' '' + sel with: pane inVector at: stdTemplates.	self frame: (user screenrect center asRectangle inset: 20080).	self show. 	pane showing: para.	pane formerly: formerly.	pane from: pane]' classified: 'as yet unclassified'CompiledMethod understands: 'freeLiterals | t1 t2 t3 t4  	[t1 _ self numLiterals.	t1 = 0  []	t2 _ Vector new: (t1 max: 2).	BitBlt new bltObj: t2 field: 1 to: t1 fromObj: self field: 2]' classified: 'as yet unclassified'CompiledMethod understands: 'holdLiterals: t1 | t2 t3 t4  	[t2 _ t1 copy.	BitBlt new bltObj: t2 field: 1 to: t2 length fromObj: nil field: 0]' classified: 'as yet unclassified'CompiledMethod understands: 'initialPC 	[self isQuick  [0]	(self byte1 land: 126) - 1]' classified: 'accessing'CompiledMethod understands: 'isQuick 	[self byte1 = 128]' classified: 'testing'CompiledMethod understands: 'isReturnField 	[self byte1 = 128 and self byte2  255  [self byte2 + 1]	false]' classified: 'testing'CompiledMethod understands: 'isReturnSelf 	[self byte1 = 128 and self byte2 = 255]' classified: 'testing'CompiledMethod understands: 'literals | numLits lits	[numLits _ self numLiterals.	numLits = 0  [()]	lits _ Vector new: (numLits max: 2).	BitBlt new bltObj: lits field: 1 to: numLits fromObj: self field: 2.	[numLits = 1  [lits _ (lits  1) inVector]].	self holdLiterals: lits.	lits]' classified: 'results'CompiledMethod understands: 'numArgs 	[self isQuick  [0]	self byte2 land: 15]' classified: 'accessing'CompiledMethod understands: 'numLiterals 	[self isQuick  [0]	(self byte1 land: 126) - 4 / 2]' classified: 'accessing'CompiledMethod understands: 'numStack 	[0]' classified: 'as yet unclassified'CompiledMethod understands: 'numTemps 	[self isQuick  [0]	(self byte1 land: 1) * 16 + (self byte2 / 16)]' classified: 'accessing'CompiledMethod understands: 'primitive 	[self byte1  128  [0]	self literal: self numLiterals]' classified: 'accessing'CompiledMethod understands: 'toReturnField: t1 | t2 	[t2 _ CompiledMethod new: 2.	t2 byte1: 128 byte2: t1 - 1.	t2]' classified: 'as yet unclassified'CompiledMethod understands: 'toReturnSelf | meth 	[meth _ CompiledMethod new: 2.	meth byte1: 128 byte2: 255.	meth]' classified: 'as yet unclassified'Decompiler understands: 'decompile: selector withMethod: meth class: class | strm block pc primNo startPC nTemps 	[method _ meth.	method length < 3  [self quickCode: selector class: class]	literals _ method literals.	primNo _ method primitive.	startPC _ method initialPC - 1.	nTemps _ method numArgs + method numTemps.	temps _ Vector new: nTemps.	self initSymbols: class.	stack _ (Vector new: 10) asStream.	block _ self block: startPC + 1 to: method length pc [pc] hasValue [pc].	stack empty  false  [user notify: ''stack not empty'']	self convertMacros: block sel: selector.	strm _ Stream default.	self printPattern: selector on: strm.	strm crtab: 1.	block printon: strm indent: 1 precedence: 0 forValue: false decompiler: self.	[primNo  0 		[strm append: '' primitive: ''.		strm print: primNo]].	strm contents asParagraph makeBoldPattern]' classified: 'as yet unclassified'Decompiler understands: 'quickCode: t1 class: t2 | t3 	[(	[method isReturnSelf  [t1]		t3 _ method isReturnField.		[t3  [t1 + '' ['' + (t2 instvars  t3) + '']'']		''undecipherable method'']] ) asParagraph makeBoldPattern]' classified: 'as yet unclassified'Generator understands: 'abortWith: t1 | t2 	[[WhatFlag  [user notify: t1]].	parser terminate.	user restoredisplay.	requestor notify: t1 at: sourceStream position in: sourceStream.	root eval]' classified: 'as yet unclassified'Generator understands: 'compileIn: t1 | t2 t3 t4 t5 t6 	[self setRoot [nil].	parser _ Parser new.	parser from: sourceStream to: self.	self initSymbols: t1.	t2 _ ParsedBlock default.	t5 _ parser pattern: t2.	t4 _ nTemps.	parser temporaries: t2.	t6 _ parser body: t2.	parser mustBeDone.	parser _ nil.	t2 mustReturn: true.	t3 _ (t6 = 0 and t4 = 0) and t2 quickCode.	[t3  []	t3 _ self generate: t2 in: t1 prim: t6 nargs: t4].	t1 install: t5 method: t3 literals: literals code: sourceStream asArray backpointers: nil.	[HuhFlag 		[Huh _ nil.		Huh _ (self decompile: t3 onto: Stream default) contents.		HuhFlag _ false]].	t5]' classified: 'as yet unclassified'Generator understands: 'evaluate: t1 in: t2 to: t3 notifying: t4 | t5 t6 t7 t8 	[sourceStream _ t1.	requestor _ t4.	t5 _ user displayoffwhile [self evaluateIn: t2 to: t3].	root  true  false  [t5]	t6 _ nTemps.	t2  [t5 run: t3 in: t2 mclass]	t5 run: t3 in: t3 class]' classified: 'as yet unclassified'Generator understands: 'evaluateIn: t1 to: t2 | t3 t4 t5 t6 	[self setRoot [nil].	t3 _ ParsedBlock default.	parser _ Parser new.	parser from: sourceStream to: self.	[t1 		[t5 _ t1 mclass.		self initSymbols: t5.		t1 variableNamesInto: self with: ParsedBlock default.		t6 _ nTemps.		self setRoot [nil]]	t5 _ t2 class.	self initSymbols: t5].	parser temporaries: t3.	parser statements: t3.	parser mustBeDone.	parser _ nil.	t3 mustReturn: false.	t4 _ self generate: t3 in: t5 prim: 0 nargs: 0.	[HuhFlag 		[Huh _ nil.		Huh _ (self decompile: t4 onto: Stream default) contents.		HuhFlag _ false]].	root _ true.	nTemps _ t6.	t4]' classified: 'as yet unclassified'Generator understands: 'generate: t1 in: t2 prim: t3 nargs: t4 | t5 t6 t7 t8 t9 t10 	[t7 _ literals find: nil.	[t7 > 0  [literals _ (literals  (1 to: t7 - 1)) copy]].	t5 _ String new: t1 sizeForValue.	t6 _ t5 asStream.	t8 _ ParseStack init.	t1 emitForValue: t6 on: t8.	[t8 position  1  [user notify: ''Compiler stack discrepancy'']].	[t6 position  t5 length  [user notify: ''Compiler code size discrepancy'']].	t9 _ maxTemp - t4.	t4 > 15 or t9 > 31  [user notify: ''Methods are limited to 15 args and 31 temps''].	t10 _ (CompiledMethod new: 2) numArgs: t4 numTemps: t9 numStack: t8 length literals: literals primitive: t3 bytes: t5.	t10]' classified: 'as yet unclassified'Generator understands: 'terminate 	["no cleanup needed in St-78"]' classified: 'changing process state'InspectWindow understands: 'of: t1 | t2 t3 t4 t5 s allStrings	[object _ t1.	t2 _ VariablePane new.	t3 _ CodePane new.	self title: object class title with: t2 , t3 at: stdTemplates.	self newframe.	self show.	t2 to: t3.	t3 from: t2.	variables _ (Vector new: 16) asStream.	[object class is: VariableLengthClass  		[for t5 from: object fields do [self identifier: t5]]	object Is: Dictionary 		[for t5 from: object objects do [t5  nil  [] self identifier: t5]]	object class fieldNamesInto: self].	t4 _ Vector new: 2.	t4 all_ object.	allStrings _ true.	for s from: variables contents do		[s Is: String  [] allStrings _ false].	allStrings  [t2 names: ((self ) concat: variables contents sort) values: t4 wrt: false]	t2 names: ((self ) concat: variables contents) values: t4 wrt: false]"Smalltalk inspect(1 2 9 2 6) inspectUndeclared invert inspect"' classified: 'as yet unclassified'Integer understands: 'lshift: t1 	[t1 class  Integer  [self asLarge lshift: t1]	self lshift: t1 asSmall] primitive: 12' classified: 'as yet unclassified'Integer understands: 'maxVal 	[16383]' classified: 'accessing'Integer understands: 'minVal 	[16384]' classified: 'accessing'Integer understands: 'printon: strm 	[self < 0 		[self = self minVal  [strm append: ''16384'']		strm append: ''''.		0 - self printon: strm base: 10]	self printon: strm base: 10]' classified: 'as yet unclassified'LargeInteger understands: 'asSmall | t1 t2 	[t1 _ bytes  1.	[bytes length > 1 		[t2 _ bytes  2.		t1 _ (((t2 land: 63) - (t2 land: 64)) lshift: 8) + t1]		].	neg 		[t1 = 0 minVal  [t1]		0 - t1]	t1]' classified: 'as yet unclassified'LargeInteger understands: 'land: t1 | t2 t3 t4 	[t2 _ self logicArg bytes.	t3 _ t1 asLarge logicArg bytes.	t4 _ Natural new: 2.	t4  1 _ t2  1 land: t3  1.	t4  2 _ t2  2 land: t3  2.	(LargeInteger new bytes: t4 neg: false) logicUnArg]' classified: 'as yet unclassified'LargeInteger understands: 'lor: t1 | t2 t3 t4 	[		t2 _ self logicArg.		t3 _ t1 asLarge logicArg.		t4 _ Natural new: 2.		t4  1 _ t2  1 lor: t3  1.		t4  2 _ t2  2 lor: t3  2.		(LargeInteger new bytes: t4 neg: false) logicUnArg]' classified: 'as yet unclassified'LargeInteger understands: 'lshift: t1 | t2 t3 t4 t5 t6 	[		t2 _ self logicArg.		t3 _ Natural new: 2.		t3  1 _ t2 bytes  1.		t3  2 _ t2 bytes  2.		t2 bytes: t3 neg: false.		t6 _ t1 abs.		t6  16  [0]		t4 _ t6 / 2.		t5 _ t6 - t4.		t4 _ 1 lshift: t4.		t5 _ 1 lshift: t5.		t6 _ t4 asLarge * t5 asLarge.		t2 _ [t1 < 0  [t2 / t6]				t2 * t6].		t3 _ Natural new: 2.		t3  1 _ t2 bytes  1.		t3  2 _ t2 bytes  2.		(LargeInteger new bytes: t3 neg: false) logicUnArg]' classified: 'as yet unclassified'LargeInteger understands: 'lxor: t1 | t2 t3 t4 	[		t2 _ self logicArg.		t3 _ t1 asLarge logicArg.		t4 _ Natural new: 2.		t4  1 _ t2  1 lxor: t3  1.		t4  2 _ t2  2 lxor: t3  2.		(LargeInteger new bytes: t4 neg: false) logicUnArg]' classified: 'as yet unclassified'MessageDict understands: 'freeMethod: m 	[m  nil  []	self primFlushMethodCache.	(nil swap [m]) free]' classified: 'as yet unclassified'MessageDict understands: 'holdLiterals: t1 	[t1]' classified: 'as yet unclassified'MessageDict understands: 'init: n 	[methods _ Vector new: n.	code _ Vector new: n.	super init: n]' classified: 'private'MessageDict understands: 'literalsIn: aMethod 	[aMethod  nil  [Vector new: 0]	aMethod literals]' classified: 'as yet unclassified'ParsedBlock understands: 'quickCode | t2 	[[position = 1 and (returns and [t2 _ array  1. t2 emitsLoad]) 		[t2 = toLoadSelf 			[(CompiledMethod new: 2) toReturnSelf]		t2 isField 			[(CompiledMethod new: 2) toReturnField: (t2 land: 255) + 1]		false]].	false]' classified: 'as yet unclassified'Parser understands: 'advance | t1 	[mark _ source position - [type > aBinary  [1] 0].		t1 _ oppositeCourt.		oppositeCourt _ thisContext.		t1 eval]' classified: 'scanning'Parser understands: 'contents 	[type _ 0.	mark _ source position + 1.	while true do		[self resume.		self notify: ''MORE EXPECTED'']]' classified: 'accessing'Parser understands: 'resume | t1 	[t1 _ oppositeCourt.	oppositeCourt _ thisContext.	t1 eval]' classified: 'changing process state'Parser understands: 'terminate 	[[dest  nil  []	dest terminate.	dest _ nil].	oppositeCourt _ nil]' classified: 'changing process state'Process understands: 'goBaby 	[NoteTaker _ true.	MethodKeeper _ (Vector new: 10) asStream.	externalViews _ Set new vector: 10.	user currentDisplay: (Form new extent: 1024  768 bits: (String new: 1024 * 768 / 8) offset: nil).	while true do		[self run]]' classified: 'init-restart'Process understands: 'init 	[minsize _ 128.	self length < minsize  [user notify: ''Processess too small.''	minsize _ 128.	stack _ Vector new: 1000].	maxused _ 0.	top _ 1]' classified: 'init-restart'Reader understands: 'rdint: char 	[token reset.	[nextchar = char 		[token next_ char.		self step]].	while nextchar do		[nextchar < 48  [token contents]  " < 0 "		nextchar > 57   " > 9 "			[nextchar > 72  [token contents]  " > H "			nextchar < 65  [token contents]  " < A "			nextchar = 71  [token contents]  " = G "			token next_ nextchar.  " here is ABCDEF and H "			nextchar _ source next].		token next_ nextchar.  " here is 0123456789 "		nextchar _ source next].	token contents]' classified: 'as yet unclassified'Rectangle understands: 'blt: t1 mode: t2 	[DisplayBLTer bltrect: self topt: t1 mode: (t2 land: 3) color: 0]' classified: 'as yet unclassified'Rectangle understands: 'blt: t1 mode: t2 clippedBy: t3 | t4 t5 t6 t7 	[t6 _ DisplayBLTer copy.	t6 window: t3.	t6 bltrect: self topt: t1 mode: (t2 land: 3) color: 0]' classified: 'as yet unclassified'Rectangle understands: 'bltcomp: t1 mode: t2 	[DisplayBLTer bltrect: self topt: t1 mode: 4 + (t2 land: 3) color: 0]' classified: 'as yet unclassified'Rectangle understands: 'brush: t1 mode: t2 color: t3 	[DisplayBLTer bltrect: self topt: t1 mode: 8 + (t2 land: 3) color: t3]' classified: 'as yet unclassified'Rectangle understands: 'brush: t1 mode: t2 color: t3 clippedBy: t4 | t5 t6 t7 t8 	[t7 _ DisplayBLTer copy.	t7 window: t4.	t7 bltrect: self topt: t1 mode: 8 + (t2 land: 3) color: t3]' classified: 'as yet unclassified'SelectorPane understands: 'yellowbug |	[selection = 0  [window flash]	scrollBar hidewhile 		[editmenu bug			= 1  [Smalltalk browseSendersOf: listselection];			= 2  [Smalltalk browseImplementersOf: listselection];			= 3  [organizationPane filout: list  selection];			= 4  [organizationPane spawn: list  selection with: codePane contents formerly: codePane oldContents];			= 5  [organizationPane forget: list  selection]]]' classified: 'as yet unclassified'Stream understands: 'upto: match | item strm  	[strm _ (String new: 250) asStream.	for item from: self do		[item = match  [strm contents]		strm next_ item].	strm contents]' classified: 'as yet unclassified'String understands: 'splitAt: separator | strm splits match	" ''abc def'' splitAt: '' ''1 "	[strm _ Stream new of: self.	splits _ Stream new of: (Vector new: 10).	match _ strm upto: separator.	splits next_ match.	while strm end  false do		[match _ strm upto: separator.		splits next_ match].	 splits contents]' classified: 'accessing'SymbolTable understands: 'allImplementersOf: selector  | class each  "Smalltalk allImplementersOf:  "	[ (self allClasses		all class suchThat [class md has: selector])		transform each to each title + '''' + selector	]' classified: 'as yet unclassified'SymbolTable understands: 'browseAllImplementersOf: selector   "Smalltalk browseAllImplementersOf:  "	[self browseMessageList: (self allImplementersOf: selector)]'SymbolTable understands: 'browseAllRefsTo: nameOrNames | refList items pair selector refs	"Smalltalk browseAllRefsTo: ProcessFrame."	[self browseMultiMessageList: ((self allRefsTo: nameOrNames from: Smalltalk allClassNames) splitAt: 13)]'SymbolTable understands: 'browseImplementersOf: selector   "Smalltalk browseImplementersOf:  "	[self browseMessageList: (self allImplementersOf: selector)]'SymbolTable understands: 'browseMessageList: items | which pair class selector code 	"items is an array of ''Classselector'' pairs to choose from a menu"	[which _ (Menu new stringFromVector: items) fbug.	which < 1 or which > items length  [false]	pair _ items  which splitAt: ''''1.	class _ Smalltalk(pair1) unique.	selector_ (pair2) unique.	code _ class code: selector.	class edit: selector para: code formerly: code]'SymbolTable understands: 'browseMultiMessageList: refList | refs pair class selector items 	"refList is an array of ''Classsel1 sel2 sel3'' items to choose from a menu"	["Build a list of simple classselector'' pairs"	items _ Stream new of: (Vector new: 20).	for refs from: refList do		[pair _ refs splitAt: ''''1.		for selector from: ((pair2) splitAt: '' ''1) do			[items next_ (pair1) + '''' + selector]].	self browseMessageList: items contents]'SymbolTable understands: 'browseSendersOf: selector   "Smalltalk browseSendersOf: init "	[self browseMultiMessageList: ((Smalltalk allCallsOn: selector from: user classNames) splitAt: 13)]'Textframe understands: 'frame: f window: w para: p style: s 	[frame _ f.	window _ w.	para _ p.	style _ s.	lines _ Vector new: 32.	lastline _ 0.	bg _ white.	para  nil or frame  nil  []	self measureall]' classified: 'as yet unclassified'TextImage understands: 'checklooks | t val mask oldval leading [	"see ParagraphEditor checklooks.	substitute c1 for loc1, c2 for loc2, oldEntity for oldpara, entity for para"	t _ (166 150 137 151   230 214 201 215		135 159 144 143 128 127 129 131 180 149		199 223 208 207 192 191 228 229) find: user kbck.	t=0[false]	user kbd.	oldval _ (para runAndVal: c1)  2.	val _ (1 2 4 256   1 2 4 256  "ctl-b i - x   B I  X"		0 16 32 48 64 80 96 112 128 144  "ctl-0 1 ... 9"		160 176 192 208 224 240 01F0H 0110H)t.  "ctl-shift-0 1 ... 5 + -"	[val=256[mask_ 0377.  val_ 0]		"reset all"	val<0[mask_ 0-val.  val_ 0]		"reset emphasis"	val>0 and val<16[mask_ val.		"toggle emphasis"		(oldval land: mask)=val[val _ 0]]	mask_ 0360.					"set font"	val>240  [val _ oldval + val]].		"inc/dec font"	para maskrun: c1 to: c2-1 under: mask to: val.	if mask = 0360	then [self lineheightAdjust; show.		"self replace: c1 to: c2 - 1 with: (para copy: c1 to: c2 - 1)"]	else [self displaylines: (self lineofchar: c1) to: (self lineofchar: c2)].	self select]' classified: 'as yet unclassified'TextScanner understands: 'frame: f window: w para: p style: s printing: b	[frame _ f.	para _ p.	style _ s.	printing _ b.	super init.	self toDisplay.	function _ [style effect = 0  [oring] style effect land: 7].	exceptions _ defaultExceptions.	fontno _ 1.	para _ para asParagraph.	text _ para text.	self window: w]' classified: 'as yet unclassified'TextScanner understands: 'toDisplay 	[self destForm_ DisplayForm]' classified: 'as yet unclassified'UserView understands: 'buttons | t1 	[self primMouseKeys land: 7]' classified: 'mouse, cursor and kbd'UserView understands: 'displayoffwhile t1	[t1 eval]' classified: 'displaying'UserView understands: 'loadUpdatesThrough: N "user loadUpdatesThrough: 312"	| allUpdates beforeLevel beforeChanges	[Object allInstances. "force GC"	beforeLevel _ updateLevel.	beforeChanges _ Changes copy.	allUpdates _ self updatesAvailable.	while updateLevel < (N min: allUpdates length) do		[self filin: updateURL + (allUpdates  (updateLevel + 1)).		updateLevel _ updateLevel + 1.		Object allInstances "force GC"].	Changes init copyfrom: beforeChanges.	self cr; show: [beforeLevel = updateLevel  [''No''] (updateLevel - beforeLevel) asString];		show: '' new updates loaded. updateLevel '' + updateLevel asString; cr]'UserView understands: 'mp 	[self primMousePt + (mxoffset  myoffset)]' classified: 'mouse, cursor and kbd'UserView understands: 'notify: str 	[self notifyNT: str.	self]' classified: 'transcript etc'UserView understands: 'notifyNT: msg | notifier frame	[NotifyFlag 		[notifier _ NotifyWindowNT new.		frame _ thisContext current caller caller.	"skip notifyNT: and notify:"		[msg = ''user interrupt''  [frame _ frame caller]].	"skip error:"		notifier title: msg processFrame: frame.		NormalCursor topage1.		self schedule: notifier; run: true]	self cr; show: ''ctl-d to restart''.	self ev.	thisContext restart]' classified: 'handy system access'UserView understands: 'rawkbck | t3 	[while [t3 _ user primKbdPeek. t3] do			[t3  0  [t3]			user primKbdNext].	user idle.	false]' classified: 'mouse, cursor and kbd'UserView understands: 'rawkbd 	[until self rawkbck do [].	self primKbdNext]' classified: 'mouse, cursor and kbd'VariablePane understands: 'yellowbug | menu cr	[cr _ 13 inString.	selection = 0  [window flash]	[menu _ varmenu.		values1 is: Dictionary  [menu _ Menu new string: ''inspectcopy nameremove'']		values1 is: SymbolTable  [menu _ Menu new string: ''inspectcopy nameremoveshow references'']		].	scrollBar hidewhile 		[menu bug = 1  [self value inspect];			= 2  [TextImage new primClipboard_ listselection];			= 3  [user confirm: ''really delete '' + (listselection) + ''?''  						[values1 delete: listselection]];			= 4  [values1 browseAllRefsTo: listselection]]	]' classified: 'as yet unclassified'MessageDict derstands: 'freeLiterals:' unique.Object derstands: 'Altonail' unique.Object derstands: 'AltounNail' unique.Object derstands: 'nail' unique.Object derstands: 'unNail' unique.Rectangle derstands: 'ALTObitsFromString:mode:' unique.Rectangle derstands: 'ALTObitsIntoString:mode:' unique.Rectangle derstands: 'ALTOblt:mode:' unique.Rectangle derstands: 'ALTObltcomp:mode:' unique.Rectangle derstands: 'ALTObrush:mode:color:' unique.Rectangle derstands: 'ALTOcolor:mode:' unique.ClassPane classInit