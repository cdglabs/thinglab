'Changes from (4 April 2023 12:02:59 am )'Class new title: TextImage	subclassof: Textframe	fields: 'c1 c2 begintypein superimage oldEntity sel'	declare: 'on paste paragraphmenu ctlw doit right cut down pageup pagedown undo up end again home copy search prompt all compile esc off Scrap scrap cancel left bs Deletion ';	classified: 'Text Objects'BitBlt understands: 'destPt _ pt	[self destx _ pt x.	self desty _ pt y]'BitBlt understands: 'sourceRect_ r	[sourcex _ r leftside.	sourcey _ r top.	width _ r width.	height _ r height]'Class understands: 'browseAllSourceWIthString: aString | refs aClass supers class found each	"Integer browseAllSourceWIthString: ''max'' "	[refs _ Dictionary new init.  "Dictionary inspector is nicer"	for class from: (self withAllSuperclasses concat: self allSubclasses) do		[found _ class sourceStringReferencesTo: aString.		for each from: found do [refs insert: each with: each]		]	refs  inspectWithTitle: ''Methods with '' + aString asString autoselect: aString]'CodePane understands: 'classInit   "CodePane classInit."	[editmenu _ Menu new string: ''again (j)copy (c)cut (x)paste (v)undo (z)doit (d)compile (s)cancel (l)find (f)- - - - -insert pictureeffectlineheightalignment'']' classified: 'as yet unclassified'CodePane understands: 'kbd | key	[key _ user kbck.	key = 130 or (pared hasPrompt and key = 13) 		[user kbd.  		user shiftKey  [pared extendPrompt]		self doit]	key = 138 		[user kbd. self compile]	key = 151   "cut needs to do a copy first"		[pared copyselection.		pared typing]	key = 165 		[user kbd. self cancel]	key = 204 		[user kbd. pared search]	pared typing]' classified: 'as yet unclassified'EllipseWindow understands: 'drawFill: color | top right center radii turtle phi function rect disk	[top _ self style: topPoint.	right _ self style: rightPoint.	center _ top x  right y.	radii _ (right x - center x)  (center y - top y).	rect _ Rectangle new origin: center-radii corner: center+radii.	disk _ (Form new extent: rect extent) makeDisk.	disk displayat: rect origin effect: compSource+anding.	disk fill: disk bounds color: color mode: 12+anding.	disk displayat: rect origin effect: 1 "oring".	"turtle _ self turtle: function.	turtle place: right.	for phi from: 0.0 to: 360.0 asRadians by: 5.0 asRadians do [		turtle goto: (phi cosphi sin) * radii + center]"	]'Form understands: 'makeDisk | pen 	"(Form new extent: 5050) makeDisk displayat: 5050."	"(Form new extent: 5050) makeDisk		asOpaqueForm displayat: 5050."	[pen _ Turtle new initOnForm: self.	pen color: black; width: 2; inking: oring.	pen ellipse: self bounds.	self shapeFill]'Form understands: 'makeEllipse | pen 	"(Form new extent: 10050) makeEllipse displayat: 5050."	"(Form new extent: 10050) makeEllipse		asOpaqueForm displayat: 5050."	[pen _ Turtle new initOnForm: self.	pen color: black; width: 1; inking: oring.	pen circle: self extent x/2 at: self extent/2.	self shapeFill]'Form understands: 'paintRect: sourceRect at: destPt on: destForm color: color | bb	[bb _ BitBlt new.	bb sourceForm_ self.	bb sourceRect_ sourceRect.	bb destForm_ destForm.	bb destPt_ destPt.	bb color_ color.	bb function_ 8; callBLT]'Form understands: 'shapeFill | destForm tempForm dir sourceRect	"Fill the interior of the outtermost outlined region in the receiver.  	The outlined region must not be concave by more than 90 degrees.  	Then the resulting form is used with fillShape: to paint a solid color."		[destForm _ Form new extent: self extent.  destForm black.	sourceRect _ self bounds.	for dir from: (00) fourNeighbors do		["Smear self in all 4 directions, and AND the result"		tempForm _ self copy.		tempForm smear: dir distance: (dir dotProduct: tempForm extent) abs.		tempForm copy: sourceRect to: 00 in: destForm effect: 3.  "AND"		].	 destForm]'Form understands: 'smear: dir distance: dist 	"Smear any black pixels in this form in the direction dir in Log N steps"	| skew destPt sourceRect	[sourceRect _ 00 extent: self extent.	skew _ 1.	while [skew < dist] do		[destPt _ dir*skew.		self copy: sourceRect to: destPt in: self effect: oring.		skew _ skew+skew]	]'InspectWindow understands: 'of: obj withTitle: titleString autoselect: autoselect | win	[win_ self of: obj		varPane: (VariablePane new autoselect: autoselect)		askNewframe: true.	win title_ titleString.	 win]'MovieWindow understands: 'testBuffering | f pen	"AnimWindow new testBuffering"	["Start by reusing this class from Alan. . ."	"Create a window on screen with two buffers in frame array"	"rect _ Rectangle fromuser."	f _ Form new extent: 5050.		pen _ Turtle new initOnForm: f.		pen color: black; width: 2; inking: oring.		pen circle: 22 at: (2525).	f shapeFill displayat: 00]" | turtle i rot rect	[turtle _ Turtle init. turtle color: black; width: 3; inking: oring.	rect _ user screenrect center-(100100) extent: 200200.	for rot from: 1 to: 90 by: 10 do		[rect clear: white.		turtle home; up;  turn: rot.		for i to: 50 do [turtle go: i * 4; turn: 89]]]. | turtle i r rect a c d 	[turtle _ Turtle init. turtle color: black; width: 3; inking: oring.	rect _ user screenrect center-(100100) extent: 200200.	turtle home; up.	d _ 5. a_ 3. c _ 360.0*d/a. r_c/2 pi.	turtle goto: user mp; up; turn: 90; go: 0-r; turn: 90.			for i to: 360/a do		[turtle go: d ; turn: a]]."'MovieWindow understands: 'title: title frame: rect 	"user schedule: (MovieWindow new title: ''Movie'' frame: Rectangle fromuser)."	" Inheritance. . .	MoviewWindow	   AnimWindow: frames current stepTime	      FormWindow: form effect turtlemode	         Window: frame collapsed titlepara growing exitflag style bits"	| win 	[win _ super title: title frame: (rect inset: 2).   "calls fixFrame. . ."	stepTime _ 200.   "milliseconds, that is"	 win]'Object understands: 'inspectWithTitle: title | insp ext	[ self inspectWithTitle: title autoselect: nil]'Object understands: 'inspectWithTitle: title autoselect: autoselect | insp ext	[user leaveTop.	user restartup: (InspectWindow new of: self withTitle: title autoselect: autoselect)]'OpaqueForm understands: 'displayat: pt in: destForm  | compSource	"(Form new extent: 5050) makeDisk		displayat: 5050 in: DisplayForm."	"(Form new extent: 5050) makeDisk asOpaqueForm 		displayat: 5050 in: DisplayForm."	[compSource _ 4.	mask displayat: pt effect: compSource+anding "erase mode" in: destForm.	self displayat: pt effect: oring in: destForm]'Rectangle understands: 'encompass: ps | topLeft bottomRight i p	"this rectangle shall include every point in the vector ps"	[for i to: ps length do [		p _ ps  i.		[topLeft  nil  [ "First point"			topLeft _ p.			bottomRight _ p]		topLeft _ topLeft min: p.		bottomRight _ bottomRight max: p]].corner _ bottomRight.	origin _ topLeft.	 self]' classified: 'rectangle functions'RectWindow understands: 'drawFill: color | b e 	[b _ self style: beginPoint.	e _ self style: endPoint.	(Rectangle new origin: b corner: e)  clear: color]'ShapeWindow understands: 'show 	[growing  []	[(self style: fill)  nil  false		[self drawFill: (self style: fill)]].	self draw: storing.	self showtitle]' classified: 'button commands'StarWindow understands: 'draw: function | t p verts	"draw the star"	[verts _ self traceStar.	t _ self turtle: function.	t place: verts first.	for p from: verts do		[t goto: p]]'StarWindow understands: 'drawFill: color | verts starBounds starForm mask t p fill	["first make a form in which to draw a star"	verts _ self traceStar.	starBounds _ Rectangle new encompass: verts.	starForm _ Form new extent: starBounds extent.	"then draw a star in the outline"	t _ Turtle new initOnForm: starForm.	t width: 2.	t place: verts first-starBounds origin.	for p from: verts do		[t goto: p-starBounds origin].	"then smear the outline to create a solid star"	mask _ starForm shapeFill.	"finally, use the solid star as a stencil for the fill color"	mask displayat: starBounds origin effect: compSource+anding.	fill _ self style: fill.	mask paintRect: mask bounds at: starBounds origin		on: DisplayForm color: fill]'StarWindow understands: 'show 	"Overriddedn here to cover inside strokes		by doing the fill after the outline"	[growing  []	self draw: storing.	[(self style: fill)  nil  false		[self drawFill: (self style: fill)]].	self showtitle]'StarWindow understands: 'traceStar | t first center i radius dist verts	"generates the star and returns the vertices in order"	[first _ self style: firstPoint.	center _ self style: centerPoint.	radius _ self dist: center and: first.	dist _ ((1.0 - 144.0 asRadians cos) * 2.0 * radius * radius) sqrt.	t _ self turtle: 0.	t penup; place: first.	t up; turn: (first - center) theta asDegrees + 90.0.	verts _ Stream new of: (Vector new: 10).	verts next_ t location.	t turn: 162.	for i to: 5 do		[t go: dist; turn: 144.		verts next_ t location].	 verts contents]'SymbolTable understands: 'browseAllRefsTo: nameOrNames | refList items pair selector refs 	"Smalltalk browseAllRefsTo: ProcessFrame."	[self browseMultiMessageList: ((self allRefsTo: nameOrNames from: Smalltalk allClassNames) splitAt: 13)		autoselect: nameOrNames		withTitle: ''References to '' + nameOrNames]'SymbolTable understands: 'browseAllSourceWIthString: aString  | refs 	"Smalltalk browseAllSourceWIthString: ''while''. " 	"see also, eg. . .  UserView browseAllSourceWIthString: ''progress'' "	[refs _ self allSourceWIthString: aString.	refsnil[]	(user confirm: ''Browse '' + refs contents length asString + '' results'')		[refs inspectWithTitle: ''Methods with '' + aString asString autoselect: aString].	]'SymbolTable understands: 'browseMessageList: items withTitle: title autoselect: autoselect | item "which pair class selector code" dict	"items is an array of ''Classselector'' pairs to choose from a menu" 	[dict _ (Dictionary new: 10) insertall: items.	for item from: items do [dict insert: item with: item].	 dict inspectWithTitle: title autoselect: autoselect]'SymbolTable understands: 'browseMultiMessageList: refList autoselect: autoselect withTitle: title | refs pair class selector items	"refList is an array of ''Classsel1 sel2 sel3'' items to choose from a menu"	[refList length < 1		[user confirm: ''none found''].	(refList1) length < 1		[user confirm: ''none found''].	"Build a list of simple classselector'' pairs"	items _ Stream new of: (Vector new: 20).	for refs from: refList do		[pair _ refs splitAt: ''''1.		for selector from: ((pair2) splitAt: '' ''1) do			[items next_ (pair1) + '''' + selector]].	self browseMessageList: items contents withTitle: title autoselect: autoselect]'SymbolTable understands: 'browseSendersOf: selector | key i   "Smalltalk browseSendersOf: origin:corner: " 	[key _ selector.		"For now only autoselect first of several keywords"	[(i_ key find: '':''1) > 0 		[key _ key copy: 1 to: i].	(i_ key find: ''''1) > 0 		[key _ key copy: 1 to: i].	"Ditto for left-arrow keyword"	(i_ key find: ''_''1) > 0 		[key _ key copy: 1 to: i-1]].	"Special selectors like next etc require scan of source code"	(SpecialOops find: selector) > 0		[self browseAllSourceWIthString: key]	self browseMultiMessageList: ((Smalltalk allCallsOn: selector from: user classNames) splitAt: 13)		autoselect: key		withTitle: ''Senders of '' + selector]'TextImage understands: 'classInit  "TextImage classInit."  "user kbd"	[bs _ 8.	ctlw _ 145.	esc _ 160.	cut _ 151.	copy _ 173.	paste _ 158.	doit _ 130. "doit key. doit char is 30"	prompt _ 167. "prompt key. prompt char is 20"	again _ 134.	all _ 136.	compile _ 138.	undo _ 153.	cancel _ 165.	left _ 193.	right _ 194.	up _ 195.	down _ 196.	pageup _ 197.	pagedown _ 198.	home _ 202.	end _ 203.	search _ 204.	Deletion _ nullString.	Scrap _ Deletion.	on _ 1.	off _ 0.	paragraphmenu _ Menu new string: ''againcopycutpastedoitcompileundocancelalignfitresize'']' classified: 'as yet unclassified'Turtle understands: 'circle: radius at: pt  |  i r n a d rr	" | t [t _ Turtle init. t color: black; width: 3; inking: oring.		t circle: 50 at: 100100]."		"This now uses the ellipse code but not quite as smooth"	[true[rr _ (radius-1) asPoint.		 self ellipse: (Rectangle new origin: pt-rr extent: pt+rr)]	"Here''s the old go-a-little turn-a-little: "	a_ 3.  n_360.0/a. "number of segments"	r _ radius asFloat.  d_ 2.0 pi*r/n.  "length of each"	self place: pt - (r0); up.	for i to: n do		[self go: d; turn: a]]'Turtle understands: 'ellipse: rect	" | t [t _ Turtle init. t color: black; width: 3; inking: oring.		t ellipse: Rectangle fromuser]."	| center radii theta	[center _ rect center.	radii _ (rect rightside - center x)  (center y - rect top).	self place: (rect rightside)center y.	for theta from: 0.0 to: 360.0 asRadians by: 5.0 asRadians do		[self goto: (theta costheta sin) * radii + center]]'Turtle understands: 'location	[ location]'VariablePane understands: 'selected | class sel code	[((self value is: String) and [self value has: ''''1]) 		[valuePane browseMethodSpec: self value.		autoselectnilfalse[valuePane autoselect: autoselect]].	((self value is: String) and [(self value1) = (''|''1)]) 		[valuePane browseMethodSpec: self value].	valuePane showing: self value asString.	autoselectnil[]	autoselect length=0[]	valuePane autoselect: autoselect]' classified: 'as yet unclassified'Form derstands: 'shapeFill:' unique.InspectWindow derstands: 'of:autoselect:' unique.StarWindow derstands: 'drawStar' unique.StarWindow derstands: 'drawStar:' unique.StarWindow derstands: 'traceStar:' unique.SymbolTable derstands: 'browseMessageList:' unique.SymbolTable derstands: 'browseMultiMessageList:' unique.SymbolTable derstands: 'browseMultiMessageList:withTitle:' unique.SymbolTable derstands: 'browseMultiMessageList:withTitle:autoselect:' unique.CodePane classInitTextImage classInit