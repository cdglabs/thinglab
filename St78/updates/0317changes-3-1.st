'Reshape old intances if possible; Introduce DisplayObject; support project variables; reorganize UserView'Class understands: 'fields: fieldString  | r a b s h sel priorChanges oldInsts	[myinstvars _ fieldString.	messagedict _ MessageDict init.	r _ self realself.	a _ self instvars.	h_ HashSet init.	for s from: a do		[h has: s [user notify: s+'' is used already (maybe in superclass)'']		h insert: s].	self=r[self initClass]	a=(b_ r instvars)		[r environment_ nil; myinstvars_ myinstvars; subclassof: superclass]	"The class is being reshaped..."	user cr; show: ''Recompiling '' + title +''...''.	oldInsts _ r allInstances. 	[oldInsts length>0[user cr; show: ''Old instances will be reshaped'']].	classvars _ r classvars copy.	messagedict _ MessageDict init.	priorChanges _ Changes copy.	for sel from: r messages do		[self copy: sel from: r].	Changes _ priorChanges.	self fixSubClassesOf: r.	Smalltalktitle unique _ self.	self initClass.	for a from: oldInsts do		[a become: (self copy: a)].	r obsolete]' classified: 'access'Class new title: UserView	subclassof: Object	fields: 'screenrect "<Rectangle> current screen size"		vtab "<Integer=0mod2> offset from hardware top"		htab "<Integer=0mod16> offset from hardware left"		scale "<Integer=1 or 2> 2 means double bits mode"		color "<Integer> background halftone"		projectWindow "my representative in an overview"		disp "<dispframe> default message stream"		sched "<Vector> Windows in this view"		noupdate "<true|false> do not update display"		content "symbolTable for Project variables"		tickIndex "scheduler index for ticking windows"		'	declare: 'screenMenu restartRequested mxoffset currentCursor myoffset ';	classified: 'Kernel Classes'Class new title: DisplayObject	subclassof: Object	fields: ''	declare: '';	classified: 'Graphical Objects'.Form instfield: 6 _ DisplayObject.InspectWindow understands: 'of: t1 | t2 t3 t4 t5 	[object _ t1.	t2 _ VariablePane new.	t3 _ CodePane new.	self title: object class title with: t2 , t3 at: stdTemplates.	self newframe.	self show.	t2 to: t3.	t3 from: t2.	variables _ (Vector new: 16) asStream.	[object class is: VariableLengthClass  		[for t5 from: object fields do [self identifier: t5]]	object Is: Dictionary 		[for t5 from: object objects do [t5  nil  [] self identifier: t5]]	object class fieldNamesInto: self].	t4 _ Vector new: 2.	t4 all_ object.	t2 names: ((self ) concat: variables contents) values: t4 wrt: false]' classified: 'as yet unclassified'SymbolTable understands: 'allRefsTo: nameOrNames  "Smalltalk allRefsTo: Process"	"UserView classvars allRefsTo: tickIndex"	"Note:  Undeclared allRefsTo: Context  will return all references to an undeclared global,		and Undeclared showAllRefs will print all of them in disp"	[self allRefsTo: nameOrNames from: Smalltalk allClassNames]' classified: 'as yet unclassified'UserView understands: 'assureContent	[ [contentnil[content _ SymbolTable new init: 4]].	 content]' classified: 'project state and content'UserView understands: 'content	["Return dictionary of project content"	 self assureContent]' classified: 'project state and content'UserView understands: 'declare: str	[self content declare: str]' classified: 'project state and content'Generator understands: 'variable: t1 | t2 t3 t4 t5 projRef	[t2 _ local lookup: t1.	t2  [t2]	projRef _ user content lookupRef: t1.	projRef  [codeLoadLitInd + (self litIndex: projRef)]	t5 _ t1 hasBeenUniqued.	[t5  [for t3 from: environment do			[t4 _ t3 lookupRef: t5.			t4  [codeLoadLitInd + (self litIndex: t4)]]]].	requestor interactive  [parser notify: ''Smalltalk declare: '' + t1 + '' as: nilTO DECLARE GLOBAL'']	user show: '' ('' + t1 + '' is Undeclared) ''.	t5 _ t1 unique.	Undeclared declare: t5.	codeLoadLitInd + (self litIndex: (Undeclared ref: t5))]' classified: 'as yet unclassified'VariablePane understands: 'value 	[selection = 1  [values  1]	values1 Is: Dictionary  [(values1) (listselection)]	values  2 inspectfield: selection - 1]' classified: 'accessing'UserView organization fromParagraph:'''Where Smalltalk holds most of the global static state, especially classes, UserView is a collection of state and methods relating to the dynamic operation of the system.  This includes input from the mouse and other devices, output to the transcript (disp), and the user view (get it?) that includes various windows and other display objects, their Z-ordering and ticking behavior.  There is also a changeSet that records and can filout changes made in that particular context, as a "poroject".  Most recently we have added the content dictionary that holds the displayable and scriptable content in this world in a way that allows it to be addressed with simple "project variables" now recognized by the compiler.  The intent is to provide a flexible set of instance variables for this world as a self-containted object.''(''transcript etc'' clear clearshow: confirm: cr croak ev frame newdisp newdisploc:and: next_ notify: print: request: show show: space tab )(''mouse, cursor and kbd'' anybug anykeys bluebug bugScreenMenu buttons ctrlKey currentCursor currentCursor: cursorBLTer:xoff:yoff: cursorLink: cursorloc_ draw eachtimeAgain kbck kbd kbd: kbdnext keyset metaKey mp mpnext nobug primCursorLoc_ primKbdBlock primKbdNext primKbdPeek primMouseKeys primMousePt rawkbck rawkbd read recognize recognizer recognizeStroke: redbug shiftKey waitbug waitclickbug waitnobug waitnokey x y yellowbug )(''start & finish'' install primSave quit quitThen: quitThen:continue: save uninstall )(''displaying'' currentDisplay: displayFlush displayHeight: displayoffwhile mapDisplay primScreenExtent restore restore: restore:without: restoredisplay screenextent:tab: screenrect screenrect:vtab:htab:scale:color:projectWindow:disp:sched: )(''scheduling''  allWindowsAddTo: allWindowsInAllProjects leaveTop promote: requestRestart restart restart restartTicks restartup: run run: runTicks sched schedule: scheduleOnBottom: toBottom: topWindow unschedule: )(''project state and content'' asset: asset:_ assureContent classInit color color:scale: content copyIn: declare: loadFormWindow projectWindow rootUserview turtleDemo )(''handy system access'' classNames compileAllFrom:to: growSmalltalk: idle initCompiler millisecondsToRun notifier:level:interrupt: notifier:stack:interrupt: notifyNT: primWait: purgealittle reportSpace ticks workspace )(''file stuff'' changedMessages changeLogdo editFile: fileMenu:directory:matching: fileString: fileString:_ fileStrings fileStrings: fileStrings:matching: filin: filout: filoutChanges:on: loadUpdates noChanges update: update:_ updatesAvailable writeChangedMessages: writeSources: )(''obsolete or deleted stuff'' calibrate convertTime:returnSecs: core InLd: now NTshrink overlay: primEIANext primEIANext_ primEIAPeek primPort: primPort:mask:_ rawtotalsecs reconfigure releaseExternalViews Swat tablet tabletabsolute tabletbug tabletrelative time timewords today totalsecs touched touchPrim: touchPt version versionName wait: waitUntil: )(''as yet unclassified'' )' asParagraph for: UserViewUserView classvars has: tickIndex  [UserView classvars delete: tickIndex].UserView understands: 'runTicks	["Run through the scheduler sending tick to any window with style: ticking"	"This is experimental and may foul up our nice throttling of CPU cycles"	"Runs at most one window tick per call on idle"	[tickIndex  nil  [tickIndex _ 1]	 tickIndex _ tickIndex + 1.	 tickIndex  sched length  [tickIndex _ 1]].	while tickIndex  sched length do		[(schedtickIndex) style: ticking  [ (schedtickIndex) tick]		user buttons. "indicate to VM that we are in fact idle"		tickIndex _ tickIndex + 1]	]' classified: 'scheduling'InspectWindow derstands: 'show:' unique.