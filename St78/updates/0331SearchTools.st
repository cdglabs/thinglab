'Makes Smalltalk a SystemDictionary to make a place for help and many SymbolTable search methods.'Class new title: SystemDictionary	subclassof: SymbolTable	fields: ''	declare: '';	classified: 'Kernel Classes'Smalltalk _ SystemDictionary new copyfrom: Smalltalk.Class understands: 'browseAllSourceWIthString: aString | refs aClass supers class found each	"Integer browseAllSourceWIthString: ''max'' "	[refs _ Dictionary new init.  "Dictionary inspector is nicer"	aClass _ self.  supers _ Set default.	while [aClass  nil  false]		do [supers add: aClass.			aClass _ aClass superclass].	for class from: supers do		[found _ class sourceStringReferencesTo: aString.		for each from: found do [refs insert: each with: each]		]	refs  inspectWithTitle: ''Methods with '' + aString asString]'Class understands: 'sourceStringAt: sel  | codePara 	[user shiftKey  [self decompile: sel].	(messagedict code: sel)  nil  [ self decompile: sel]	 messagedict code: sel ]'Class understands: 'sourceStringReferencesTo: aString | refs sel " Class  sourceStringReferencesTo: ''OrgOn'' " 	[refs _ Set default.	for sel from: messagedict do		[((self sourceStringAt: sel) findString: aString startingAt: 1) > 0 			[refs add: self title + '''' + sel]]	 refs contents]'ClassPane understands: 'yellowbug | bug cls varName	[selection = 0  [window flash]	bug _ editmenu bug. 	cls _ Smalltalk  (list  selection).	bug = 1  [cls filout]	bug = 2  [cls printout]	bug = 3  [systemPane forget: list  selection]	bug = 4  [user schedule: (BrowseWindow new browseClass: cls). user run: true]	bug = 5  [Smalltalk browseAllRefsTo: list  selection]	bug = 6  [varName _ (cls instvars + (''- - - -'') + cls classvars contents) choose.			cls browseAllSourceWIthString: varName]	bug = 7  [cls classvars inspect]	]' classified: 'as yet unclassified'CodePane understands: 'browseMethodSpec: spec | pair cls sel code	"spec is a  ''Classselector'' string"	[spec has: ''''1 		[pair _ spec splitAt: ''''1.		cls _ Smalltalk(pair1) unique.		sel_ (pair2) unique.		code _ cls code: sel.		self class: cls selector: sel para: code		]]' classified: 'menu messages'CodePane understands: 'class: cls selector: sel para: para	[class _ cls.	selector _ sel.	para  nil  [ self].	self showing: para]' classified: 'as yet unclassified'FilePane understands: 'yellowbug	[(Menu new string: ''againcopycutpastedoitsave fileundocancel'') bug		= 1  [pared again];		= 2  [pared copyselection];		= 3  [pared cut];		= 4  [pared paste];		= 5  [self doit];		= 6  [self compile];		= 7  [pared undo];		= 8  [self cancel]]'Form understands: 'black 	[self fill: self bounds color: black]' classified: 'coloring'Form understands: 'black: rect	[self fill: rect color: black]' classified: 'as yet unclassified'Form understands: 'bounds	[ 00 extent: self extent]'Form understands: 'fill: rect color: color 	[ self fill: rect color: color mode: 12 "constant fill"]'Form understands: 'fill: rect color: color mode: mode 	| blt	[blt _ BitBlt new destForm _ self.	blt bltrect: rect topt: rect origin mode: mode color: color]'Form understands: 'white 	[self fill: self bounds color: white]' classified: 'coloring'Form understands: 'white: rect 	[self fill: rect color: white]'InspectWindow understands: 'of: t1 | t2 t3 t4 t5 s allStrings 	[object _ t1.	t2 _ VariablePane new.	t3 _ CodePane new.	self title: object class title with: t2 , t3 at: stdTemplates.	self newframe.	self show.	t2 to: t3.	t3 from: t2.	variables _ (Vector new: 16) asStream.	[object class is: VariableLengthClass  		[for t5 from: object fields do [self identifier: t5]]	object Is: Dictionary 		[for t5 from: object objects do [t5  nil  [] self identifier: t5]]	object class fieldNamesInto: self].	t4 _ Vector new: 2.	t4 all_ object.	allStrings _ true.	for s from: variables contents do		[s Is: String  [] allStrings _ false].	object Is: Dictionary 		[t2 names: ((self ) concat: variables contents sort) values: t4 wrt: false]	t2 names: ((self ) concat: variables contents) values: t4 wrt: false]"Smalltalk inspect(1 2 9 2 6) inspectUndeclared invert inspect"' classified: 'as yet unclassified'Object understands: 'inspectWithTitle: title | insp ext	[user leaveTop.	user restartup: (InspectWindow new of: self withTitle: title)]'String understands: 'splitAt: separator | strm splits match 	" ''abc def'' splitAt: '' ''1 "	[strm _ Stream new of: self.	splits _ Stream new of: (Vector new: 10).	match _ strm upto: separator.	splits next_ match.	while strm end  false do		[match _ strm upto: separator.		splits next_ match].	 splits contents]' classified: 'accessing'SymbolTable understands: 'allGlobals  | globs table s  " Smalltalk allGlobals inspect " 	"return an array of names of non-classes in me"	[table _ SymbolTable new init: 10.	globs _ self contents all s suchThat 		[(selfs Is: Class)false].	"The copied table must share the same objectReferences"	for s from: globs do [table insert: s withref: (self ref: s)].	 table]' classified: 'as yet unclassified'SymbolTable understands: 'allImplementersOf: selector  | class each  "Smalltalk allImplementersOf:  " 	[ (self allClasses		all class suchThat [class md has: selector])		transform each to each title + '''' + selector	]' classified: 'as yet unclassified'SymbolTable understands: 'browseAllImplementersOf: selector   "Smalltalk browseAllImplementersOf:  " 	[self browseMessageList: (self allImplementersOf: selector)		withTitle: ''Implementers of '' + selector]'SymbolTable understands: 'browseAllRefsTo: nameOrNames | refList items pair selector refs 	"Smalltalk browseAllRefsTo: ProcessFrame."	[self browseMultiMessageList: ((self allRefsTo: nameOrNames from: Smalltalk allClassNames) splitAt: 13)		withTitle: ''References to '' + nameOrNames]'SymbolTable understands: 'browseAllSourceWIthString: aString  | refs class found each classes i	"Smalltalk browseAllSourceWIthString: ''while'' " 	"see also, eg. . .  UserView browseAllSourceWIthString: ''progress'' "	["Takes a minute or so the first time. . . "	user progressOpen.	refs _ Dictionary new init.  "Dictionary inspector is nicer"	classes _ self allClasses.	for i from: 1 to: classes length do		[class _ classesi.		user progressUpdate: i asFloat/classes length.  "0. . .1"		found _ class sourceStringReferencesTo: aString.		for each from: found do [refs insert: each with: each]		]	user progressClose.	refs contents length<1[user confirm: ''Not found''.  nil].	(user confirm: ''Browse '' + refs contents length asString + '' results'')		[refs inspectWithTitle: ''Methods with '' + aString asString].	]'SymbolTable understands: 'browseChanges | list str  "Smalltalk browseChanges" 	[list _ Changes contents.	list _ list transform str to (str subst: '''' for: '' '').	 self browseMessageList: list withTitle: ''Changes contents'']'SymbolTable understands: 'browseImplementersOf: selector   "Smalltalk browseImplementersOf:  " 	[self browseMessageList: (self allImplementersOf: selector)		withTitle: ''Implementers of '' + selector]'SymbolTable understands: 'browseMessageList: items withTitle: title | item "which pair class selector code" dict	"items is an array of ''Classselector'' pairs to choose from a menu" 	[dict _ (Dictionary new: 10) insertall: items.	for item from: items do [dict insert: item with: item].	 dict inspectWithTitle: title]'SymbolTable understands: 'browseMethodSpec: spec | pair class selector code 	"spec is a  ''Classselector'' string"	[spec has: ''''1 		[pair _ spec splitAt: ''''1.		class _ Smalltalk(pair1) unique.		selector_ (pair2) unique.		code _ class code: selector.		class edit: selector para: code formerly: code		]]'SymbolTable understands: 'browseMultiMessageList: refList withTitle: title | refs pair class selector items	"refList is an array of ''Classsel1 sel2 sel3'' items to choose from a menu"	[refList length < 1		[user confirm: ''none found''].	(refList1) length < 1		[user confirm: ''none found''].	"Build a list of simple classselector'' pairs"	items _ Stream new of: (Vector new: 20).	for refs from: refList do		[pair _ refs splitAt: ''''1.		for selector from: ((pair2) splitAt: '' ''1) do			[items next_ (pair1) + '''' + selector]].	self browseMessageList: items contents withTitle: title]'SymbolTable understands: 'browseSendersOf: selector   "Smalltalk browseSendersOf: init " 	[self browseMultiMessageList: ((Smalltalk allCallsOn: selector from: user classNames) splitAt: 13)		 withTitle: ''Senders of '' + selector]'SystemDictionary understands: 'help  "Smalltalk help"	[user schedule: (CodeWindow new title: ''Useful expressions'' para: (SystemDictionary code: help)).	"	Smalltalk browseChanges. 	Changes init.	user sched inspect -> vector of windows	user schedule: ProjectSorter init.	Undeclared inspectWithTitle: ''Undeclared''.  	Smalltalk inspectWithTitle: ''Smalltalk''.	Smalltalk allGlobals inspectWithTitle: ''Globals''.	Window browseAllSourceWIthString: ''exitflag''.	Smalltalk browseAllSourceWIthString: ''unique.''.	Smalltalk browseSendersOf: unique.	Smalltalk browseImplementersOf: title:rocessFrame:.	user filoutWindowsOn: ''wintest.st''. 	Smalltalk _ SystemDictionary new copyfrom: Smalltalk.	"	]'TextImage understands: 'selectword | a b dir t4 level openChars closeChars str slen c	"Select bracketed or word range, as a result of double-click"	[dir _ 1.	b _ dir.	a _ b.	str _ para text.	slen _ str length.	level _ 1.	openChars _ ''([{<''''"''.	closeChars _ '')]}>''''"''.	"Double-click at begin or end selects all"	c1 = 1 		[c2 _ slen + 1. self]	c2 = (slen + 1) 		[c1 _ 1. self]	[c1  1 		[dir _ 1.		t4 _ c1]	c1 > slen  [t4 _ c1 - 1]	a _ para  (c1 - 1).	t4 _ openChars find: a.	t4 > 0 		[dir _ 1.   "Delimiter on left; match to the right"		b _ closeChars  t4.		t4 _ c1 - 1]	a _ para  c1.	t4 _ closeChars find: a.	t4 > 0 		[dir _ 1.   "Delimiter on right; match to the left"		b _ openChars  t4.		t4 _ c1]	a _ 1.	t4 _ c1].	until (level = 0 or [dir = 1  [t4  slen]	t4  1]) do		[t4 _ t4 + dir.		c _ str  t4.		c = b  [level _ level - 1]   "leaving nest"		c = a  [level _ level + 1]   "entering next"		a = 1 			[(str  t4) tokenish 				[t4 = 1 					[dir _ 1.    "token check goes left"					c1 _ dir.					t4 _ c2]]			dir = 1 				[c1 _ t4 + 1.     "then right"				dir _ 1.				t4 _ c2 - 1]			level _ 0]].	[level  0  [t4 _ t4 + dir]].	dir = 1  [c2 _ t4 min: slen + 1]	c1 _ t4 + 1]' classified: 'as yet unclassified'UserView understands: 'bugScreenMenu | m w turtle i f index file	[m _ 0.	screenMenu bug	= (m_m+1)  [projectWindow runParent];	= (m_m+1)  [user shiftKey  [projectSequencer visitPrevious] projectSequencer visitNext];	= (m_m+1)  [self restore];	= (m_m+1)  [self schedule: ProjectWindow init];	= (m_m+1)  [Smalltalk help];	= (m_m+1)  [self schedule: BrowseWindow default];	= (m_m+1)  [self schedule: (CodeWindow new title: ''Workspace'' para: '''')];	= (m_m+1)  [self schedule: (CodeWindow new title: ''Space Report'' para: self reportSpace)];	= (m_m+1)  [w _ self loadFormWindow  [self schedule: w enter]];	= (m_m+1)  [self schedule: ArrowWindow default];	= (m_m+1)  [self schedule: RectWindow default];	= (m_m+1)  [self schedule: EllipseWindow default];	= (m_m+1)  [self schedule: StarWindow default];	= (m_m+1)  [self schedule: D1TopWindow default];	= (m_m+1)  [self turtleDemo];	= (m_m+1) 		[f _ self fileMenu: ''edit'' directory: '''' matching: ''*''			 [self editFile: f]];	= (m_m+1) 		[f _ self fileMenu: ''file in'' directory: '''' matching: ''*.st''			 [self filin: f]];	= (m_m+1) 		[f _ self fileMenu: ''file delete'' directory: '''' matching: ''*''			 [self confirm: ''Really delete '' + f  [self fileString: f _ nil]]];		= (m_m+1) 		[f _ self fileMenu: ''publish'' directory: '''' matching: ''*.st''			 [file _ self fileString: f.			self fileString: (self update: f _ file) _ file.			self fileString: f _ nil]];	= (m_m+1)  [self loadUpdates];	= (m_m+1)  [user save]]' classified: 'mouse, cursor and kbd'UserView understands: 'classInit  "UserView classInit."	[screenMenu _ Menu new string:''go to parent projectgo to next projectrestore displayopen a projecthelpopen a browseropen a workspaceopen a space reportopen form ...create an arrowcreate a rectanglecreate an ellipsecreate a startablet demoturtle demoedit file ...file in ...delete file ...publish update ...load updatessave'']' classified: 'project state and content'UserView understands: 'progressClose	[user unschedule: (user  ''Progress'').	user restore]'UserView understands: 'progressOpen | barWin	[barWin _ FormWindow new form: (Form new extent: 12020).	barWin frame: (user mp - (barWin form extent/2) extent: barWin form extent).	barWin title _ ''Progress''.	user schedule: barWin.	(user  ''Progress'') show.	]'UserView understands: 'progressUpdate: frac	| barWin bar	[barWin _ user  ''Progress''.	bar _ barWin form.	bar white.	bar fill: (00 extent: (frac* bar extent x)  bar extent y) color: gray.	barWin show.	]'VariablePane understands: 'selected | class sel code 	[((self value is: String) and [self value has: ''''1]) 		[ valuePane browseMethodSpec: self value].	valuePane showing: self value asString]' classified: 'as yet unclassified'VariablePane understands: 'value	[selection = 1  [values  1]	values1 Is: Dictionary  [(values1) (listselection)]	values  2 inspectfield: selection - 1]' classified: 'accessing'VariablePane understands: 'yellowbug | menu cr sself pair	"Dan: we should really have different pane classes for these cases. . ."	[cr _ 13 inString.	selection = 0  [window flash]	sself _ values1.	[menu _ varmenu.		sself is: Dictionary 			[((self value is: String) and [self value has: ''''1]) 				[menu _ Menu new string: ''inspectcopy nameremovebrowsesendersimplementers''].			menu _ Menu new string: ''inspectcopy nameremovebrowse'']		sself Is: SymbolTable 			[menu _ Menu new string: ''inspectcopy nameremoveshow references'']		].	scrollBar hidewhile 		[menu bug = 1  [self value inspect];			= 2  [TextImage new primClipboard_ listselection];			= 3  [user confirm: ''remove '' + (listselection) + '' from this list?''  						[values1 delete: listselection]];			= 4  [sself is: Dictionary 					[Smalltalk browseMethodSpec: sself(listselection)]				  values1 browseAllRefsTo: listselection];			= 5  ["already checked for '''' above"					pair _ sself(listselection) splitAt: ''''1.					Smalltalk browseSendersOf: (pair2) unique];			= 6  [pair _ sself(listselection) splitAt: ''''1.					Smalltalk browseImplementersOf: (pair2) unique]]	]' classified: 'as yet unclassified'Window understands: 'of: content withTitle: title | win 	[win _ self of: content.	win title_ title.	 win]'UserView derstands: 'progressOpen:' unique.UserView classInit