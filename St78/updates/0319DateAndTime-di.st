'Skeleton implementation of Date and Time - enough to answer and print:  now, time, and today in UserView.'Smalltalk has: Date  [Smalltalk delete: Date].Smalltalk has: Time  [Smalltalk delete: Time].Class new title: Date	subclassof: Number	fields: 'year day'	declare: '';	classified: 'Numbers'Class new title: Time	subclassof: Number	fields: 'h m s'	declare: '';	classified: 'Numbers'Date understands: 'day: day year: year | d	[while day > (d _ self daysinyear) do [		year _ year + 1.		day _ day - d].	while day  0 do [		year _ year - 1.		day _ day + self daysinyear].	]'Date understands: 'daysinyear 	[365 + self leap]'Date understands: 'fromDays: d [	"d = days since Jan 1 1901. There are 1461 days in a 4-year cycle.	2000 is a leap year, so no extra correction is necessary.	day:year: will fix things up"	d _ d asInteger intdiv: 1461.	self day: 1+ (d2) asSmall year: 1901+ ((d1) asSmall *4)]'Date understands: 'leap	[year \ 4 = 0 [		year \ 100 = 0 [year \ 400 = 0 [1] 0]		1]	0]'Date understands: 'month | m leap [	leap _ self leap.	for m from: 12 to: 1 by: 1 do [		(self monthday: m) < day [m]].	user notify: ''illegal month'']'Date understands: 'monthday: m "Return first day-in-year of m''th month"	[(0 31 59 90 120 151 181 212 243 273 304 334)m +		[m > 2 [self leap] 0]]'Date understands: 'monthnames	[ (January February March April May June		July August September October November December)]'Date understands: 'printon: strm	[self printon: strm format: (1 2 3 040 3 1)]'Date understands: 'printon: strm format: f | i m [	"f is print format.	1-3	positions to print day,month,year respectively	4	character separator	5	month format (1 month #, 2 first 3 chars, 3 entire name)	6	year format (1 year #, 2 year #\100)"	m _ self month.	for i to: 3 do [		[fi		=1 [day - (self monthday: m) printon: strm];		=2 [			f5			=1 [m printon: strm];			=2 [strm append: self monthnamesm(1 to: 3)]			strm append: self monthnamesm]		([f6=1 [year] year\100]) printon: strm].		i<3 [strm next _ f4 "separator"]]]'Time understands: 'fromSeconds: sec [	"seconds since midnight (adjusted for time zone and DST)"	sec _ sec asInteger intdiv: 3600.	h _ (sec1) asSmall.	sec _ (sec2) asSmall.	m _ sec / 60.	s _ sec \ 60]'Time understands: 'printon: strm "Format is h:mm:ss am/pm" [	strm print: [h>12[h-12]; <1[12] h];		append: [m < 10 ['':0''] '':'']; print: m;		append: [s < 10 ['':0''] '':'']; print: s;		space append: [h<12[''am''] ''pm'']]'UserView understands: 'convertTime: s returnSecs: format | d dd t dfirst dlast m570 m571 [ 	"s is total seconds from midnight Jan 1 1901 GMT (Greenwich mean time).	see maxc <AltoDocs>AltoTime.Press for details"	false["Old code to adjust for time zone"		m570 _ mem0570. m571 _ mem0571.		s _ s + (([m570  0 ["west" 1] "east" 1]) * (			(3600 * ("hours" m570 bits: (1 to: 4))) +			(60 * ("additonal minutes" m571 bits: (1 to: 6)))))]	t _ s intdiv: 24*3600."Days since 1901, seconds since midnight"	"current day (in local standard time)"	d _ Date new fromDays: t1.	[format [] t _ Time new fromSeconds: t2].	[false  [ "check for DST. correct DST parameters for nonleap years		and round to previous Sunday if necessary"		"day of the year on or before which DST takes effect"		dfirst _ m570 land: 0777 "bits: (7 to: 15)".		[[dfirst = 366 ["DST not in effect" false]		(dd _ d day)  (dfirst _ dfirst + d leap - 1) [			"day of the year on or before which DST ends"			dlast _ (m571 land: 0777 "bits: (7 to: 15)") + d leap - 1.			dd < dlast "if false, definitely after" and			dd < ((Date new day: dlast year: d year) previous: 6) day]		"possibly earlier than or at beginning of range"		dd  ((Date new day: dfirst year: d year) previous: 6) day] [			"daylight savings time in effect. add an hour"			format [s _ s + 3600]			t hours = 23 [				d _ d+1.				t hours: 0]			t hours: t hours+1]]]].	"return either total seconds or Date and Time"	format [s]	 d , t]' classified: 'Time stuff (to do)'UserView understands: 'millisecondsToRun code | start	[start _ self ticks.	code eval.	self ticks - start]' classified: 'Time stuff (to do)'UserView understands: 'rawtotalsecs "user rawtotalsecs - Returns the number of seconds since 1901"	[self croak] primitive: 71' classified: 'Time stuff (to do)''It is now ' + user now asString