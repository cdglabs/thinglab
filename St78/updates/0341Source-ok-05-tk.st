'Methods with original comments and temp names.Only those that do not affect actual byteCode will be installed.'.Changes init.MergingSources _ true. "must be turned off at end"BitRectTool understands: 'mode	[ mode]' classified: falseBrowseWindow understands: 'classInit	[stdTemplates _ (00 rect: 1014), (100 rect: 1814), (180 rect: 2814), (280 rect: 3614), (014 rect: 3636)]' classified: falseBrowseWindow understands: 'default 	"Let the user draw a five-paned window to browse through classes."		| systemPane classPane orgPane selectorPane codePane	["Create the panes."	systemPane _ SystemPane new. classPane _ ClassPane new.	orgPane _ OrganizationPane new. selectorPane _ SelectorPane new.	codePane _ CodePane new.	"Acquire them."	self title: ''Classes''		with: (systemPane, classPane, orgPane, selectorPane, codePane)		at: stdTemplates.	self newframe; show.	"Interconnect them."	systemPane to: classPane. classPane from: systemPane to: orgPane.	orgPane from: classPane to: selectorPane. selectorPane from: orgPane to: codePane.	codePane from: selectorPane.		"Display them."	systemPane update]' classified: falseClassPane understands: 'compile: parag	[systemPane compile: parag]' classified: falseClassPane understands: 'deselected	["I just lost my selection.  Tell organizationPane to display nothing."	organizationPane class: nil.]' classified: falseClassPane understands: 'noCode	[selection=0 [systemPane noCode] '''']' classified: falseCodePane understands: 'class: class selector: selector para: para' classified: falseCodePane understands: 'close	[pared unselect. selectorPane _ pared _ nil. scrollBar close]' classified: falseCodePane understands: 'compile: parag	"as my own selectorPane"	[self compile: parag in: class under: ''As yet unclassified'']' classified: falseCodePane understands: 'compile: parag in: defaultClass under: category	[Generator new		compile: parag		in: [classnil [defaultClass] class]		under: category		notifying: self]' classified: falseCodePane understands: 'contents	[pared contents]' classified: falseCodePane understands: 'dirty	[pared formerly [frame] false]' classified: false"CodePane understands: 'eachtime [	user kbck [self kbd]	frame has: user mp [		user anybug [			user redbug [self redbug]			user yellowbug [self yellowbug]			user bluebug [false]]		user anykeys [self keyset]]	self outside]' classified: false"CodePane understands: 'execute: parseStream for: codePane		"as my own selectorPane"	[self execute: parseStream in: false to: nil]' classified: falseCodePane understands: 'execute: parseStream in: context to: receiver	[Generator new evaluate: parseStream in: context to: receiver notifying: self]' classified: falseCodePane understands: 'formerly: oldpara 	"should not be called before ''showing:''"	[pared formerly: oldpara]' classified: falseCodePane understands: 'frame _ frame	["Change my frame and that of my pared (if any)."	parednil [] pared frame _ frame.	scrollBar on: frame from: pared]' classified: falseCodePane understands: 'from: selectorPane' classified: falseCodePane understands: 'init' classified: falseCodePane understands: 'keyset	[pared keyset]' classified: falseCodePane understands: 'notify: errorString at: position in: stream	[pared		fintype;		selectRange: (position to: position);		replace: ('''' + errorString + ''.'') asParagraph;		selectAndScroll.	false]' classified: falseCodePane understands: 'oldContents	[pared formerly]' classified: falseCodePane understands: 'redbug	[pared selecting]' classified: falseCodePane understands: 'reflects: selection  "am I trying to show the code of selectorPane selection?"	[classnil and selection>0]' classified: falseCodePane understands: 'selectRange: r [pared selectRange: r; selectAndScroll]' classified: falseCodePane understands: 'show	[frame outline. pared show]' classified: falseCodePane understands: 'windowleave	[parednil[] pared leave]' classified: falseCodeWindow understands: 'classInit	[stdTemplates _ (00 rect: 3636) inVector]' classified: falseCursor understands: 'frompage1		"load this cursor from the hardware locations"	[bitstr _ String new: 32.	BitBlt new forCursor; sourcebase_ 0431; destbase _ bitstr; copy: storing]' classified: falseCursor understands: 'fromString: bitstr [self fromString: bitstr offset: 00]' classified: falseCursor understands: 'fromString: bitstr offset: offset' classified: falseCursor understands: 'fromtext: str [self fromtext: str offset: 00]' classified: falseCursor understands: 'fromtext: str offset: offset | i s n c [	"Not great, but compatible with printon."	bitstr _ String new: 32.	s _ str asStream.  s next.	for i to: 16 do		[n _ 0.		while ((c _ s next)=060 or c=061) do			[n _ (n lshift: 1)+(c-060)].		bitstr word: i _ n]]' classified: falseCursor understands: 'offset [offset]' classified: falseCursor understands: 'printon: strm | i	[strm append: ''Cursor new fromtext: ''''''.	for i to: 16 do		[strm cr.		(bitstr word: i) printon: strm base: 2]	strm append: '''''' offset: ''; print: offset; append: ''.'']' classified: falseCursor understands: 'showwhile expr | oldcursor value [	oldcursor _ user currentCursor.	self show.	value _ expr eval.	oldcursor show.	value]' classified: falseCursor understands: 'topage1	[self show]' classified: falseDispframe understands: 'clear	[self reset. self show]' classified: falseDispframe understands: 'eachtime | t	[text window has: user mp		[user kbck[t_ self kbd			[ [tnil[] self space; print: nil t].				self prompt]]		 user bluebug [false]]	user anybug[false]]' classified: falseDispframe understands: 'ev | t	[while [self cr. t _ self request: ''''] do		[self space; print: nil t]	false]' classified: falseDispframe understands: 'firsttime	[text window has: user mp		[self outline; prompt]	false]' classified: falseDispframe understands: 'init	[text _ Textframe new.	self of: (String new: 16)]' classified: falseDispframe understands: 'kbd | n t	"false if user pauses, nil if ctrl-d, all input since prompt if <prompt>"	[while user kbck do		[t _ user kbd.		t=132 [self append: ''done.''; show. nil]; "ctl-d for done"		=8 [self last=prompt[] self skip: 1]; "backspace"		=30 [n _ array(position to: 1 by:1) find: prompt.				n=0[self append: ''lost beginning''; prompt]				t_ self last: n-1. self next_ doit; show. t];				 "do-it (LF)"		=145 [self last=prompt[] self skip: 1.		"ctl-w for backspace word"				while (position>0 and: self last tokenish) do [self skip: 1]];		=151[self reset; prompt] 	"ctl-x clears frame"		self next _ t]	self show. false]' classified: falseDispframe understands: 'lasttime	[ [self last=prompt[self skip: 2; show]].	user bluebugfalse]' classified: falseDispframe understands: 'moveto: pt	[(text window inset: 22) dragto: pt-(22)]' classified: falseDispframe understands: 'outline	[text window outline: 2]' classified: falseDispframe understands: 'prompt [self cr; next_ prompt; show]' classified: falseDispframe understands: 'read | t		"false if ctrl-d, all input since prompt if <prompt>"	[self next_ prompt; show.	until [user kbck[t_ self kbd] false] do []	tnil[false] t]' classified: falseDispframe understands: 'rect: r	[self init; frame _ r; clear]' classified: falseDispframe understands: 'request: s		"false if ctrl-d, all input since prompt if <prompt>"	[self append: s. self read]' classified: falseDispframe understands: 'text	[text]' classified: falseFieldNameCollector understands: 'identifier: s [sink next_ s]' classified: falseFieldNameCollector understands: 'leftparen [self next_ ''(''] "just for error message"' classified: falseFieldNameCollector understands: 'next_ value	[user notify: ''Invalid field name: ''+value asString]' classified: falseFieldNameCollector understands: 'rightparen [self next_ '')''] "just for error message"' classified: falseInspectWindow understands: 'classInit	[stdTemplates _ (00 rect: 1236), (120 rect: 3636)]' classified: falseInspectWindow understands: 'comment: s		"called by of: via Class fieldNamesInto"' classified: falseInspectWindow understands: 'contents	"called by of: via Class fieldNamesInto"' classified: falseInspectWindow understands: 'identifier: s		"called by of: via Class fieldNamesInto"	[variables next _ s]' classified: falseInspectWindow understands: 'of: object | instanceVarPane instanceValuePane safeVec n	[instanceVarPane _ VariablePane new. instanceValuePane _ CodePane new.	self title: object class title		with: (instanceVarPane, instanceValuePane) at: stdTemplates.	self newframe; show.	instanceVarPane to: instanceValuePane.	instanceValuePane from: instanceVarPane.	variables _ (Vector new: 16) asStream.		[object class is: VariableLengthClass			[for n from: object fields do				[self identifier: n]]		object class fieldNamesInto: self].	safeVec _ Vector new: 2. safeVec all _ object.	instanceVarPane names: ((self) concat: variables contents) values: safeVec wrt: false]' classified: falseInspectWindow understands: 'show: object | fixedframe instanceVarPane instanceValuePane safeVec n	[instanceVarPane _ VariablePane new. instanceValuePane _ CodePane new.	fixedframe _ 400450 rect: 600565.	self title: object class title		with: (instanceVarPane, instanceValuePane) at: stdTemplates.	self frame: (self fixframe: fixedframe); show.	instanceVarPane to: instanceValuePane.	instanceValuePane from: instanceVarPane.	variables _ (Vector new: 16) asStream.		[object class is: VariableLengthClass			[for n from: object fields do				[self identifier: n]]		object class fieldNamesInto: self].	safeVec _ Vector new: 2. safeVec all _ object.	instanceVarPane names: ((self) concat: variables contents) values: safeVec wrt: false]' classified: falseInspectWindow understands: 'trailer: s	"called by of: via Class fieldNamesInto"' classified: falseListPane understands: 'close "Zero my selection so it wont be grayed when I close.  Break cycles."	[selection_0. scrollBar close]' classified: falseListPane understands: 'compselection "If I have a selection, complement its image."	[selection0 [self selectionRect comp]]' classified: falseListPane understands: 'deselected "I just lost my selection.  I dont care, but my subclasses might."' classified: falseListPane understands: 'dirty "My subclasses may want to prohibit a change of selection"	[false]' classified: falseListPane understands: 'dummy	['''']' classified: falseListPane understands: 'enter	[scrollBar show]' classified: falseListPane understands: 'firsttime	[window has: user mp[self enter]	false]' classified: falseListPane understands: 'grayselection	[selection0 [self selectionRect color: ltgray mode: oring]]' classified: falseListPane understands: 'init	[self para: nil frame: nil.]' classified: falseListPane understands: 'lasttime	[self leave]' classified: falseListPane understands: 'leave	[scrollBar hide]' classified: falseListPane understands: 'locked "My subclasses may want to prohibit a change of selection"	[[selection=0 [false] self dirty]]' classified: falseListPane understands: 'outline	[window outline: 1]' classified: falseListPane understands: 'outside [scrollBar startup]' classified: falseListPane understands: 'selected "A new selection is highlighted.  I dont care, but my subclasses might"' classified: falseListPane understands: 'windowleave	[self compselection; grayselection]' classified: falseListPane understands: 'yellowbug	[window flash]' classified: falseMenu understands: 'clear	[frame clear]' classified: falseMenu understands: 'frame	[ frame]' classified: falseMenu understands: 'has: pt	[ text frame has: pt]' classified: falseMenu understands: 'moveto: pt	[self clear.	frame moveto: pt.	text frame moveto: pt+2.	thisline moveto: pt+2.	]' classified: falseMenu understands: 'rebug	[user waitbug. 	"wait for button down again"	"bugcursor showwhile" self bug]' classified: falseMenu understands: 'rescan " | each. Menu allInstances notNil transform each to each rescan."	[self string: str]		"rescan (for new fonts, lineheight)"' classified: falseMenu understands: 'zbug | index bits	[bits _ self movingsetup.	while (index _ self bugit) = 0 do [].	frame bitsFromString: bits.	 index	]' classified: falseMessageDict understands: 'freeLiterals: v | m i t		"lower refct of all literals"	[v length=0[]	m _ v nail.	for i to: v length do		[t _ mem(m+i-1). vi _ nil. mem(m+i-1) _ t]	v unNail]' classified: falseMessageDict understands: 'holdMethods: v | i "a random insertion just to make it legal form"	[for i to: v length do		[self insert: i method: vi literals: nil code: nil backpointers: nil]]' classified: falseMessageDict understands: 'invert: method | i	[for i to: methods length do		[methodsimethod [objectsi]].	false]' classified: falseMessageDict understands: 'literals: name	[self literalsIn: methods(self findorerror: name)]' classified: falseMessageDict understands: 'method: name	[methods(self findorerror: name)]' classified: falseMessageDict understands: 'methodorfalse: name | i	[i _ self find: name[methodsi] false]' classified: falseMessageDict understands: 'methods	[methods]' classified: falseMessageDict understands: 'purge: sel ["demand purging invalidates checkpointing"]' classified: falseMessageDict understands: 'swap: i with: j	[methods swap: i with: j.	code swap: i with: j.	super swap: i with: j]' classified: falseNotifyWindow understands: 'aboutToFrame	[enoughpanes _ panes length = 6. super aboutToFrame]' classified: falseNotifyWindow understands: 'classInit	[smallTemplates _ (00 rect: 3636) inVector.	bigTemplates _ (00 rect: 1218), (120 rect: 3618), (018 rect: 1227), (1218 rect: 3627), (027 rect: 1236), (1227 rect: 3636).	smallFrame _ 204366 rect: 404402]' classified: falseNotifyWindow understands: 'of: titleString level: level interrupt: flag | stackPane	[NotifyFlag _ false.	stackPane _ StackPane new.	self title: titleString with: stackPane inVector at: smallTemplates.	smallFrame moveto:		[level>1			[30050]		(user screenrect center-(smallFrame extent/2))].	self frame: (self fixframe: smallFrame); show.	stackPane context: false at: level instance: false code: false;		interrupt: flag.	stackPane of: (Toplevel) inVector. NotifyFlag _ true]' classified: falseNotifyWindow understands: 'of: titleString stack: stack interrupt: flag | stackPane	[NotifyFlag _ false.	stackPane _ StackPane new.	self title: titleString with: stackPane inVector at: smallTemplates.	smallFrame moveto:		[Top currentPriority>1			[30050]		(user screenrect center-(smallFrame extent/2))].	self frame: (self fixframe: smallFrame); show.	stackPane context: false instance: false code: false; interrupt: flag.	stackPane of: stack inVector. NotifyFlag _ true]' classified: falseOrganizationPane understands: 'class: class	[self of: (self listFor: class)]' classified: falseOrganizationPane understands: 'close	[classPane _ nil. super close]' classified: falseOrganizationPane understands: 'code: selector	[class code: selector]' classified: falseOrganizationPane understands: 'deselected	["I just lost my selection.  Tell selectorPane to display nothing."	selectorPane of: (Vector new: 0)]' classified: falseOrganizationPane understands: 'dirty	[selectorPane dirty]' classified: falseOrganizationPane understands: 'execute: parag	[class parag]' classified: falseOrganizationPane understands: 'forget: selector | cat	[class derstands: selector.	cat _ listselection.	self revise: (self listFor: class) with: cat.	selection>0		[selectorPane revise: (class organization category: cat) with: selector]]' classified: falseOrganizationPane understands: 'selected	[selectorPane of: [selection2 [Vector new: 0] class organization category: listselection]]' classified: falseOrganizationPane understands: 'spawn: selector with: parag formerly: oldparag	[selectorPane compselection; select: 0.	class edit: selector para: parag formerly: oldparag]' classified: falseOrganizationPane understands: 'yellowbug	["If there is a selection, let the user choose a command from the menu."	selection1 [window flash]		"Can''t filout or print definition by itself"	editmenu bug		=1 ["filout the selected category"			selection=2 [class filoutOrganization]			class filoutCategory: listselection];		=2 ["print the selected category"			selection=2 [window flash]		"Can''t print organization"			class printoutCategory: listselection]	]' classified: falsePanedWindow understands: 'close | pane	[for pane from: panes do [pane close]]' classified: falsePanedWindow understands: 'eachtime | pane	[frame has: user mp		[user bluebug[self bluebug]		for pane from: panes do [pane startup]]	self outside[]	user anybug[frame has: user mp[] false]	user kbck[user kbd. frame flash] "flush typing outside"]' classified: falsePanedWindow understands: 'erase	[self titlerect clear. super erase]' classified: falsePanedWindow understands: 'fixframe: f	[Rectangle new origin: f origin extent: (f extent max: 16080)]' classified: falsePanedWindow understands: 'hardcopy | p	[user displayoffwhile [	p _ dp0 pressfile: (self title+''.press'') asFileName.	self hardcopy: p.	p close; toPrinter]]' classified: falsePanedWindow understands: 'kbd | pane	[(pane _ self pickedpane) [pane kbd]]' classified: falsePanedWindow understands: 'keyset | pane	[(pane _ self pickedpane) [pane keyset]]' classified: falsePanedWindow understands: 'pickedpane | pane	[for pane from: panes do [pane picked [pane]]	frame flash. false]' classified: falsePanedWindow understands: 'redbug | pane	[(pane _ self pickedpane) [pane redbug]]' classified: falsePanedWindow understands: 'takeCursor	[(panes1) takeCursor]' classified: falsePanedWindow understands: 'title	[title]' classified: falsePanedWindow understands: 'titlerect	[frame origin - (2  (DefaultTextStyle lineheight + 4)) rect: (frame corner xframe origin y) + (20)]' classified: falsePanedWindow understands: 'vanish	[self close; erase. user unschedule: self.]' classified: falsePanedWindow understands: 'yellowbug | pane	[(pane _ self pickedpane) [pane yellowbug]]' classified: falseParagraph understands: 'alignment [alignment]' classified: falseParagraph understands: 'alignment _ alignment' classified: falseParagraph understands: 'allBold [self maskrunsunder: 1 to: 1]' classified: falseParagraph understands: 'allFont: n [	[n is: String [n _ (self textStyle fontnames find: n) - 1]].	self maskrunsunder: 0360 to: n*16]' classified: falseParagraph understands: 'allItalic [self maskrunsunder: 2 to: 2]' classified: falseParagraph understands: 'asParagraph [self]' classified: falseParagraph understands: 'asStream [text asStream]' classified: falseParagraph understands: 'asVector [text asVector]' classified: falseParagraph understands: 'bravoRuns: s "Encode the runs in a Bravo paragraph trailer onto a Stream"		| i old len dif new bit bits	["assume Ctrl-Z is already there"	s append: [alignment=1[''j\g'']; =2[''c\g''] ''\g''].	[runsnil  []	len _ 0. old _ 0400.	bits _ (1 2 4).	for i from: 1 to: runs length by: 2 do		[dif _ old lxor: (new _ runs(i+1)).		(dif land: 0367)=0  "No changes" [len _ len+(runsi)]		[i=1[] len printon: s].		for bit to: 3 do			[(dif land: bitsbit)=0  []			s next _ ([(new land: bitsbit)0  [''biu''] ''BIU''])bit].		[(dif land: 0360)0  "Font change"			[s append: ''f''; print: (new lshift: 4); space]].		old _ new.		len _ runsi.		]	].	s cr]' classified: falseParagraph understands: 'center [alignment _ 2]' classified: falseParagraph understands: 'copy: a to: b		"Return a copied subrange of this paragraph"	[self class new			text: (text copy: a to: b)			runs: (self run: a to: b)			alignment: alignment]' classified: falseParagraph understands: 'findString: str startingAt: start	[text findString: str startingAt: start]' classified: falseParagraph understands: 'flushleft [alignment _ 0]' classified: falseParagraph understands: 'flushright [alignment _ 4]' classified: falseParagraph understands: 'hideData: complete | s [	s _ Stream new of: (String new: 150).	s next _ complete.	[complete=0 [s nextword _ text length] s nextString _ text].	s nextString_ [runsnil [nullString] runs];		next_ alignment.	s contents]' classified: falseParagraph understands: 'justify [alignment _ 1]' classified: falseParagraph understands: 'length [text length]' classified: falseParagraph understands: 'makeBoldPattern | s i c	[s _ text asStream.  i_ 0.	until [c_ s next		" scan to bracket, bar or comment "					[c=91[true]; =124[true]; =34[true]; =25[true] false]			true]			"end"		do [i_ i+1].	self maskrun: 1 to: i under: 1 to: 1]' classified: falseParagraph understands: 'makerun: len val: val		"Make up a solid run of value val"		| str i	[len=0[nullString]	str _ String new: len-1/255+1*2.	for i from: 1 to: str length by: 2 do [		stri _ [len>255[255] len].		str(i+1) _ val.		len _ len-255].	str]' classified: falseParagraph understands: 'maskrun: i to: j under: m to: val "Alter my runs so that the bits selected by m become val."		| r k		"Maybe merge this with mergestyle"	[r _ self run: i to: j.	for k from: 2 to: r length by: 2 do		[rk _ (rk land: 0377-m) + val].	runs _ self runcat: (self run: 1 to: i-1) and: r and: (self run: j+1 to: text length)]' classified: falseParagraph understands: 'maskrunsunder: m to: val	[self maskrun: 1 to: text length under: m to: val]' classified: falseParagraph understands: 'pressCode [99]' classified: false"Paragraph understands: 'readFrom: file [	text _ file nextString.	runs _ file nextString.	alignment _ file next.	runs empty [runs _ nil]]' classified: false"Paragraph understands: 'run: a to: b | c		"subrange of run"	[a>b[nullString]	runsnil[self makerun: 1+b-a val: 0]	a _ self runfind: a.	b _ self runfind: b.	c _ runs copy: a1 to: b1+1.		"copy the sub-run"	[(a1)=(b1)		[c1 _ 1+ (b2)-(a2)]	c1 _ 1+(runs(a1))- (a2).			"trim the end lengths"	c(c length-1) _ b2].	c]' classified: falseParagraph understands: 'runcat: r1 and: r2 and: r3 | i r olen len oc c nr [	"concatenate and compact 3 runs"	nr _ Stream new of: (String new: 30).	oc _ false.	for i to: 3 do [		r _ [i=1 [r1]; =2 [r2] r3].		r length=0 []		r _ r asStream.		while (len _ r next) do [			c _ r next.			len = 0 ["ignore empty runs (shouldn''t be any)"]			oc = c [				(olen _ olen+len)  255 []				nr next _ 255; next _ oc.				olen _ olen-255]			[oc [nr next _ olen; next _ oc] "first time thru"].			olen _ len. oc _ c]].	[oc [		"leftovers"		nr next _ olen; next _ oc]].	nr contents]' classified: falseParagraph understands: 'runcat: x to: y [self runcat: x and: y and: '''']' classified: falseParagraph understands: 'runfind: index | run	t	"index into run"	[run_1.	while (t _ index - (runsrun)) > 0 do		[index _ t. run _ run+2].	run,index]' classified: falseParagraph understands: 'runs		"return runs or default if none"	[runsnil[self makerun: text length val: 0]	runs]' classified: falseParagraph understands: 'storeOn: file [	file nextString _ text.	[runsnil [file next _ 0] file nextString _ runs].	file next _ alignment]' classified: falseParagraph understands: 'subst: x for: y "runs are not supported yet here"	[text subst: x for: y]' classified: falseParagraph understands: 'text [text]' classified: falseParagraph understands: 'text: text	[alignment _ 0]' classified: falseParagraph understands: 'text: text alignment: alignment' classified: falseParagraph understands: 'text: text runs: runs alignment: alignment' classified: falseParagraph understands: 'textStyle [DefaultTextStyle]' classified: falsePoint understands: 'hidePress: press complete: c [	"not called by Form-Path-Image, but probably by Class printout"	press skipcode: self pressCode data: (self hideData: c)]' classified: falseProjectWindow understands: 'classInit	[actionMenu _ Menu new string: ''enter'']' classified: falseProjectWindow understands: 'close		"break circular links"	[userview_ parent_ nil]' classified: falseProjectWindow understands: 'init		"a new window"	[self userview: (user copyIn: self)		changes: HashSet init		parent: user projectWindow.	self newframe; show]' classified: falseProjectWindow understands: 'runParent		"leave this view by installing the one above"	[parent install]' classified: falseProjectWindow understands: 'userview: userview changes: changes parent: parent		"load state"' classified: falseProjectWindow understands: 'yellowbug	[actionMenu bug=1[self install]]' classified: falseReader understands: 'classInit | strm type first last i "Initialize the type and mask tables"	[typetable_ String new: 256.	strm_ Stream new of: (		5 0 0377  "(initialize)"		1 0101 0132  1 0141 0172  "upper and lower case letters"		2 060 071  "digits"		3 072 072  3 03 03  "colon, open colon"		4 011 012  4 014 015  4 040 040  "TAB, LF, FF, CR, blank"		"5 is one-char tokens"		6 042 042  6 031 031  "comment quote and "		7 047 047  "string quote"		8 025 025  "high-minus"		9 032 032  "^Z (format trailer)"		10 036 036  "DOIT"		11 050 051  "open and close paren"		).	while (type_ strm next) do		[first_ strm next. last_ strm next.		for i from: (first+1 to: last+1) do			[typetablei_ type]		]	]' classified: falseReader understands: 'of: s	[typetbl_ typetable.	token_ Stream default.	source_ s asStream.	self step]' classified: falseReader understands: 'read	[self readInto: TokenCollector default]' classified: falseReader understands: 'readatom: ncolons | type s	[token reset.	while [token next_ nextchar.		(nextchar_ source next)[(type_ typetbl(nextchar+1))3]		false]	do		[type=3[ncolons_ ncolons+1]].	s_ token contents.	ncolons=0[collector identifier: s];		>1[collector otheratom: s].	s length=1[collector otheratom: s] ": or  alone"	ss length=072[collector keyword: s];		=03[collector keyword: s].	collector otheratom: s. "Colon wasn''t last character"	]' classified: falseReader understands: 'readInto: collector | x 	[while  nextchar  do		[x_ typetbl(nextchar+1).		"See classInit for the meanings of the type codes"		x=4 [collector separator: nextchar. nextchar_ source next];		=1 [self readatom: 0];		=5 [collector onechar: nextchar. nextchar_ source next];		=6 [self upto: nextchar[collector notify: ''Unmatched comment quote'']			collector comment: token contents];		=2 [self readnum];		=11 [[nextchar=050[collector leftparen] collector rightparen].			nextchar_ source next];		=7 [self upto: nextchar[collector notify: ''Unmatched string quote'']			collector string: token contents];			=8 [self readnum];		=9 [self upto: 015[collector notify: ''^Z without CR'']			collector trailer: token contents];		=10 [collector contents];		=3 [self readatom: 1]		]	collector contents]' classified: falseReader understands: 'readnum | val d e	[val_ self rdint: 025.	nextchar=056		"check for decimal point"		[self step.		nextcharfalse or nextchar isdigitfalse			[collector integer: val.  collector onechar: 056]		"was <Integer> .  "		d_ self rdint: 1.	"fraction part"		[nextchar=0145		"check for e<exponent> "			[self step.  e_ self rdint: 025]		e_ ''''].		collector float: val fraction: d exp: e] 	collector integer: val]' classified: falseReader understands: 'step	[nextchar_ source next]' classified: falseReader understands: 'upto: char | start "Knows about doubled '' in strings"	[start_ source position.	token reset.	while (nextchar_ source next) do		[[nextchar=char			[self step. char047[false] nextchar047[false]]].		token next_ nextchar].	"Ran off end, back up."	source skip: start - 1 - source position.	true]' classified: falseRemoteParagraph understands: 'asParagraph [	file position _ self position.	Paragraph new readFrom: file]' classified: falseRemoteParagraph understands: 'asString [self asParagraph text]' classified: falseRemoteParagraph understands: 'fromParagraph: p [	"write me (only once!) on file"	self position _ file position.	p storeOn: file]' classified: falseRemoteParagraph understands: 'fromString: s [self fromParagraph: s asParagraph]' classified: falseRemoteParagraph understands: 'on: file	"Refer me to a specific file"' classified: falseRemoteParagraph understands: 'position [(hipos+1000)*2000 + (lowpos+1000)]' classified: falseRemoteParagraph understands: 'position_ p	[p _ p intdiv: 2000.	hipos_ (p1) asInteger -1000.	lowpos_ (p2) asInteger -1000]' classified: falseScrollBar understands: 'classInit	[UpCursor _ Cursor new fromtext: ''1000000000000000110000000000000011100000000000001111000000000000111110000000000011111100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000''.	DownCursor _ Cursor new fromtext: ''1100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000111111000000000011111000000000001111000000000000111000000000000011000000000000001000000000000000''.	JumpCursor _ Cursor new fromtext: ''0111000000000000111110000000000011111000000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'' offset: 21]' classified: falseScrollBar understands: 'lasttime						"upon exit"	[]' classified: falseSymbolTable understands: ' name	[(supername) value]' classified: falseSymbolTable understands: ' name _ x	[(supername) value _ x]' classified: falseSymbolTable understands: 'allRefsTo: symbol from: classNames | s	[[symbol is: Vector [] symbol _ symbol inVector].	Smalltalk allCallsOn: (symbol transform s to (self ref: s)) from: classNames]' classified: falseSymbolTable understands: 'declare: name	"Take ref(s) and value(s) from Undeclared, if name(s) there"	[self declare: name from: Undeclared]' classified: falseSymbolTable understands: 'declare: name as: x | a s	[name is: Vector		[s _ x asStream. for a from: name do [self declare: a as: s next]]	self declare: name.	selfname _ x]' classified: falseSymbolTable understands: 'declare: name from: symTab | a "take name(s), ref(s) and value(s) from symTab"	[name is: Vector [for a from: name do [self declare: a from: symTab]]	self has: name []	symTab has: name		[super insert: name with: (symTab ref: name).		symTab delete: name]	self insert: name with: nil]' classified: falseSymbolTable understands: 'define: name as: x		"synonym"	[self declare: name as: x]' classified: falseSymbolTable understands: 'growto: size | name copy	[copy _ self class new init: size.	"create a copy of the new size"	for name from: self do		[copy insert: name withref: (self ref: name)]	"hash each entry into it"	self copyfrom: copy]' classified: falseSymbolTable understands: 'insert: name with: x	[	[self has: name[]		super insert: name with: ObjectReference new].	selfname _ x]' classified: falseSymbolTable understands: 'insert: name withref: ref	[super insert: name with: ref]' classified: falseSymbolTable understands: 'invert: obj | i	[for i to: values length do		[nil(valuesi)[]		obj  (valuesi) value [objectsi]]	false]' classified: falseSymbolTable understands: 'invertRef: obj | i	[for i to: values length do		[obj(valuesi)[objectsi]]	false]' classified: falseSymbolTable understands: 'lookup: name | r	[r_super lookup: name[r value] false]' classified: falseSymbolTable understands: 'lookupRef: name	[super lookup: name]' classified: falseSymbolTable understands: 'ref: name	[supername]' classified: falseSymbolTable understands: 'ref: name _ val	[supername _ val]' classified: falseSystemOrganizer understands: 'filoutCategory: cat | all a [user displayoffwhile [	all _ self superclassOrder: cat.	(dp0 file: (cat+''.st.'') asFileName) filoutclass: all.	for a from: all do [(Smalltalka) noChanges]]]' classified: falseSystemOrganizer understands: 'printAll | cat	[for cat from: commentVector do		[self printCategory: cat]]' classified: falseSystemOrganizer understands: 'printCategory: cat [user displayoffwhile [	(dp0 file: (cat+''.press'') asFileName) printoutclass: (self superclassOrder: cat)]]' classified: falseSystemOrganizer understands: 'superclassOrder: cat | all lis a i c sup  "Arrange classes in superclass order so they can be filed in"	[lis_ (self category: cat) copy. all _ (Vector new: lis length) asStream.	while lis length>0 do		[i_ 1.		until			[a_ lisi. sup_ c_ Smalltalka.			until "Make sure it doesn''t have an as yet unprinted superclass"				[sup_ sup superclass.				supnil[true]				lis has: sup title unique]			do [].			supnil]		do [i_ i+1].		all next _ a.		lis_ lis delete: a].	all contents]' classified: falseTextframe understands: 'aboutToFrame	["My frame is about to change.  I dont care."]' classified: falseTextframe understands: 'comp	[window comp]' classified: falseTextframe understands: 'erase	[(window inset: (22)) clear]' classified: falseTextframe understands: 'frame [frame]' classified: falseTextframe understands: 'frame _ frame	["Change my frame and window."	window _ frame.	]' classified: falseTextframe understands: 'lineheight	[style lineheight]' classified: falseTextframe understands: 'makeParagraph ["simulate ListPane for hardcopy"	paranil [para _ ''NIL !'' asParagraph]]' classified: falseTextframe understands: 'outline	[window border: 2 color: black]' classified: falseTextframe understands: 'para [para]' classified: falseTextframe understands: 'put: para at: pt	[self put: para at: pt centered: false]' classified: falseTextframe understands: 'put: para centered: pt	[self put: para at: pt centered: true]' classified: falseTextframe understands: 'scrolln: n	[self charofpt: frame corner x  (frame origin y+(n*style lineheight))]' classified: falseTextframe understands: 'showin: rect | old		"show clipped inside rect"	[old _ window. window _ rect. self show. window _ old]' classified: falseTextframe understands: 'style [style]' classified: falseTextframe understands: 'style: style' classified: falseTextframe understands: 'takeCursor	["Move the cursor to the center of my window."	user cursorloc _ window center]' classified: falseTextframe understands: 'window [window]' classified: falseTextImage understands: 'complement [self complement: on]' classified: falseTextImage understands: 'contents [para]' classified: falseTextImage understands: 'enter [	begintypein _ false.	self show; select]' classified: falseTextImage understands: 'formerly [oldEntity]' classified: falseTextImage understands: 'formerly: oldEntity' classified: falseTextImage understands: 'frameoffset [	"a useful number"	frame minY - window minY]' classified: falseTextImage understands: 'frame_ f [self fixframe: f]' classified: falseTextImage understands: 'keyset' classified: falseTextImage understands: 'leave [self complement: off]' classified: falseTextImage understands: 'realign [self align. sel _ on]' classified: falseTextImage understands: 'scrollPos | t [	t _ self height - self lineheight.	t=0 [0.0]	0.0 - self frameoffset / t]' classified: falseTextImage understands: 'scrollTo: f [self scrollUp: self frameoffset + (f* self height) - 4]' classified: falseTextImage understands: 'scrollUp: n [self scrollby: n/self lineheight]' classified: falseTextImage understands: 'select [self selectIn: nil]' classified: falseTextImage understands: 'select: t [	self complement: off.	c1 _ c2 _ t.	self selectAndScroll]' classified: falseTextImage understands: 'selectAndScroll | l dy c1y [	l _ self lineheight.	self select.	c1y _ (self ptofchar: c1) y.	dy _ c1y - window minY.	[dy  0 [		dy _ c1y + l - 1 - window maxY max: 0]].	dy 0 [self scrollby: (dy abs+l-1) / l * dy sign]]' classified: falseTextImage understands: 'selectIn: w [	sel _ off.	[c1nil [c1 _ c2 _ 1]].	self complement: on]' classified: falseTextImage understands: 'selection [para text empty [para copy] para copy: c1 to: c2-1]' classified: falseTextImage understands: 'selectionAsStream [Stream new of: para text from: c1 to: c2-1]' classified: falseTextImage understands: 'selectRange [c1 to: c2-1]' classified: falseTextImage understands: 'selectRange: r [	"self complement: off"	c1 _ r start.	c2 _ r stop	"self complement: on"]' classified: falseTextImage understands: 'typing [self kbd]' classified: falseTextImage understands: 'unselect [self complement: off]' classified: falseTokenCollector understands: 'contents "Close all parentheses first"	[until parenstack empty do [self rightparen].	sink contents]' classified: falseTokenCollector understands: 'default	[self to: (Vector new: 20)]' classified: falseTokenCollector understands: 'float: i fraction: f exp: e	[self next_ (i+''.''+f+''e''+e) asFloat]' classified: falseTokenCollector understands: 'identifier: s	[self next_ s unique]' classified: falseTokenCollector understands: 'integer: s	[self next_ s asInteger]' classified: falseTokenCollector understands: 'keyword: s	[self next_ s unique]' classified: falseTokenCollector understands: 'leftparen	[parenstack next_ sink.	sink_ (Vector new: 10) asStream]' classified: falseTokenCollector understands: 'next_ obj [sink next_ obj]		"subclasses can override easily"' classified: falseTokenCollector understands: 'notify: errorString	[user notify: errorString]' classified: falseTokenCollector understands: 'onechar: c | x	[x_ String new: 1. x1_ c. self next_ x unique]' classified: falseTokenCollector understands: 'otheratom: s	[self next_ s unique]' classified: falseTokenCollector understands: 'rightparen	[parenstack empty[] "Error will be caught elsewhere"	parenstack last next_ sink contents.	sink_ parenstack pop]' classified: falseTokenCollector understands: 'string: s	[self next_ s]' classified: falseTokenCollector understands: 'to: v "Initialize"	[sink_ v asStream.	parenstack_ (Vector new: 5) asStream]' classified: falseTurtle understands: 'frame [frame]' classified: falseTurtle understands: 'frame: frame' classified: falseTurtle understands: 'pen: pen' classified: falseWindow understands: 'eachtime	[frame has: user mp		[user kbck[self kbd]		user anybug			[user redbug[self redbug]			user yellowbug[self yellowbug]			user bluebug[self bluebug]]		user anykeys[self keyset]]	self outside[]	user anybug[frame has: user mp[] false]	user kbck[user kbd. frame flash] "flush typing outside"]' classified: falseWindow understands: 'erase	[(frame inset: 22) clear.	self clearTitle: background]' classified: falseWindow understands: 'fixedwidthfromuser: width | a b oldframe [	user waitnobug.	[framenil[] self aboutToFrame; erase].	a _ OriginCursor showwhile user waitbug.	growing _ true.	self frame: (frame _ self fixframe: (a rect: a+(width32))); show.	CornerCursor showwhile [		while (a _ user mpnext)  do [ a x _ frame corner x.			[oldframenil [user cursorloc _ a max: frame corner]].			oldframe _ frame copy.			self frame: (frame _ self fixframe: (frame growto: a));				moveFrom: oldframe]].	growing _ false.	self takeCursor]' classified: falseWindow understands: 'frame 	[  frame ]' classified: falseWindow understands: 'hardcopy [frame flash]' classified: falseWindow understands: 'kbd [user kbd. frame flash]' classified: falseWindow understands: 'moveFrom: oldframe	[(oldframe inset: 2) clear. self show]' classified: falseWindow understands: 'print	[(dp0 pressfile: (self title + ''.press.'') asFileName)		screenout: frame scale: PressScale; toPrinter]' classified: falseWindow understands: 'redbug	[frame flash]' classified: falseWindow understands: 'reset	[exitflag_true. growing_false]' classified: falseBrowseWindow classInitCodeWindow classInitInspectWindow classInitNotifyWindow classInitProjectWindow classInitReader classInitScrollBar classInitMergingSources _ false.